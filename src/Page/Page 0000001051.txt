OBJECT Page 1051 Additional Fee Chart
{
  OBJECT-PROPERTIES
  {
    Date=27/11/14;
    Time=12:00:00;
    Version List=NAVW18.00.00.38798;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Additional Fee Visualization;
               FRA=Visualisation des frais suppl‚mentaires];
    SourceTable=Table485;
    PageType=CardPart;
    OnAfterGetRecord=BEGIN
                       Update(CurrPage.BusinessChart);
                     END;

  }
  CONTROLS
  {
    { 1000;    ;Container ;
                Name=Chart;
                ContainerType=ContentArea }

    { 1005;1   ;Group     ;
                Name=Options;
                GroupType=Group }

    { 1001;2   ;Field     ;
                Name=ChargePerLine;
                CaptionML=[ENU=Line Fee;
                           FRA=Frais ligne];
                SourceExpr=ChargePerLine;
                Visible=ShowOptions;
                OnValidate=BEGIN
                             UpdateData;
                           END;
                            }

    { 1003;2   ;Field     ;
                Name=Currency;
                SourceExpr=Currency;
                TableRelation=Currency.Code;
                LookupPageID=Currencies;
                OnValidate=BEGIN
                             UpdateData;
                           END;
                            }

    { 1004;2   ;Field     ;
                Name=Max. Remaining Amount;
                SourceExpr=MaxRemAmount;
                MinValue=0;
                OnValidate=BEGIN
                             UpdateData;
                           END;
                            }

    { 1006;1   ;Group     ;
                Name=Graph;
                GroupType=Group }

    { 1002;2   ;Field     ;
                Name=BusinessChart;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      ReminderLevel@1001 : Record 293;
      TempSortingTable@1012 : TEMPORARY Record 1051;
      CurrExchRate@1002 : Record 330;
      ChargePerLine@1000 : Boolean;
      RemAmountTxt@1004 : TextConst 'ENU=Remaining Amount;FRA=Montant ouvert';
      Currency@1011 : Code[10];
      MeasureA@1005 : Text;
      MeasureB@1006 : Text;
      MeasureC@1007 : Text;
      FixedFee@1008 : Decimal;
      MaxRemAmount@1009 : Decimal;
      CurrMaxRemAmount@1014 : Decimal;
      ShowOptions@1003 : Boolean;
      AddInIsReady@1010 : Boolean;
      NextEntryNo@1013 : Integer;

    PROCEDURE SetViewMode@1000(SetReminderLevel@1000 : Record 293;SetChargePerLine@1002 : Boolean;SetShowOptions@1003 : Boolean);
    BEGIN
      ReminderLevel := SetReminderLevel;
      ChargePerLine := SetChargePerLine;
      ShowOptions := SetShowOptions;
    END;

    PROCEDURE UpdateData@1003();
    VAR
      AddFeeSetup@1007 : Record 1050;
      RemAmount@1005 : Decimal;
      XIndex@1004 : Integer;
      NextRangeStart@1001 : Decimal;
      CurrencyFactor@1000 : Decimal;
    BEGIN
      IF NOT AddInIsReady THEN
        EXIT;

      Initialize;
      CurrencyFactor := 1;

      MeasureA := FORMAT(ReminderLevel."Add. Fee Calculation Type"::Fixed);
      MeasureB := FORMAT(ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic");
      MeasureC := FORMAT(ReminderLevel."Add. Fee Calculation Type"::"Accumulated Dynamic");

      AddMeasure(MeasureA,1,"Data Type"::Decimal,"Chart Type"::Line);
      AddMeasure(MeasureB,1,"Data Type"::Decimal,"Chart Type"::Line);
      AddMeasure(MeasureC,1,"Data Type"::Decimal,"Chart Type"::Line);
      SetXAxis(RemAmountTxt,"Data Type"::Decimal);

      AddFeeSetup.SETRANGE("Reminder Terms Code",ReminderLevel."Reminder Terms Code");
      AddFeeSetup.SETRANGE("Reminder Level No.",ReminderLevel."No.");
      AddFeeSetup.SETRANGE("Charge Per Line",ChargePerLine);
      AddFeeSetup.SETRANGE("Currency Code",Currency);
      IF (NOT AddFeeSetup.FINDSET) AND (Currency <> '') THEN BEGIN
        AddFeeSetup.SETRANGE("Currency Code",'');
        CurrencyFactor := CurrExchRate.ExchangeAmtLCYToFCY(
            TODAY,Currency,
            1,
            CurrExchRate.ExchangeRate(TODAY,Currency));
      END;
      CurrMaxRemAmount := MaxRemAmount / CurrencyFactor;
      RemAmount := 0;

      TempSortingTable.DELETEALL;
      NextEntryNo := 1;

      SetValuesAt(0);
      IF AddFeeSetup.FINDSET THEN BEGIN
        REPEAT
          // Add points for maximum values and just before the range change
          IF AddFeeSetup."Threshold Remaining Amount" > 0 THEN BEGIN
            RemAmount := AddFeeSetup."Threshold Remaining Amount" - 1;
            SetValuesAt(RemAmount);
          END;

          // Set at start value for range
          RemAmount := AddFeeSetup."Threshold Remaining Amount";
          SetValuesAt(RemAmount);

          IF AddFeeSetup."Additional Fee %" > 0 THEN BEGIN
            // Add points for miniumum and offset
            IF (AddFeeSetup."Min. Additional Fee Amount" > 0) AND
               (AddFeeSetup."Additional Fee Amount" < AddFeeSetup."Min. Additional Fee Amount")
            THEN BEGIN
              NextRangeStart := 0;
              IF AddFeeSetup.NEXT <> 0 THEN BEGIN
                NextRangeStart := AddFeeSetup."Threshold Remaining Amount";
                AddFeeSetup.NEXT(-1);
              END;

              RemAmount :=
                AddFeeSetup."Threshold Remaining Amount" +
                (AddFeeSetup."Min. Additional Fee Amount" - AddFeeSetup."Additional Fee Amount") /
                (AddFeeSetup."Additional Fee %" / 100);
              IF (NextRangeStart > RemAmount) OR (NextRangeStart = 0) THEN
                SetValuesAt(RemAmount);
              RemAmount :=
                AddFeeSetup."Threshold Remaining Amount" + AddFeeSetup."Min. Additional Fee Amount" /
                (AddFeeSetup."Additional Fee %" / 100);
              IF (NextRangeStart > RemAmount) OR (NextRangeStart = 0) THEN
                SetValuesAt(RemAmount);
            END;

            // Find maximum threshold
            IF AddFeeSetup."Max. Additional Fee Amount" > 0 THEN BEGIN
              SetValuesAt(AddFeeSetup."Max. Additional Fee Amount" / (AddFeeSetup."Additional Fee %" / 100));
              SetValuesAt(
                AddFeeSetup."Threshold Remaining Amount" +
                (AddFeeSetup."Max. Additional Fee Amount" - AddFeeSetup."Additional Fee Amount") /
                (AddFeeSetup."Additional Fee %" / 100));
              SetValuesAt(
                AddFeeSetup."Threshold Remaining Amount" +
                (AddFeeSetup."Max. Additional Fee Amount" - AddFeeSetup."Min. Additional Fee Amount") /
                (AddFeeSetup."Additional Fee %" / 100));
              SetValuesAt(
                AddFeeSetup."Threshold Remaining Amount" + AddFeeSetup."Max. Additional Fee Amount" /
                (AddFeeSetup."Additional Fee %" / 100));
            END;
          END;
        UNTIL AddFeeSetup.NEXT = 0;

        // Add final entries
        RemAmount := RemAmount * 1.5;
        IF RemAmount = 0 THEN
          RemAmount := 1000;
        SetValuesAt(RemAmount);
        IF CurrMaxRemAmount > 0 THEN
          SetValuesAt(CurrMaxRemAmount);
      END ELSE
        SetValuesAt(1000);

      // Add the points in order
      FixedFee := ReminderLevel.CalculateAdditionalFixedFee(Currency,ChargePerLine,TODAY);
      TempSortingTable.SETCURRENTKEY(Decimal);
      IF TempSortingTable.FINDSET THEN
        REPEAT
          AddColumn(TempSortingTable.Decimal * CurrencyFactor);
          SetValue(MeasureA,XIndex,FixedFee);
          SetValue(
            MeasureB,XIndex,
            AddFeeSetup.GetAdditionalFeeFromSetup(ReminderLevel,
              TempSortingTable.Decimal * CurrencyFactor,Currency,ChargePerLine,1,TODAY));
          SetValue(
            MeasureC,XIndex,
            AddFeeSetup.GetAdditionalFeeFromSetup(ReminderLevel,
              TempSortingTable.Decimal * CurrencyFactor,Currency,ChargePerLine,2,TODAY));
          XIndex += 1;
        UNTIL TempSortingTable.NEXT = 0;

      Update(CurrPage.BusinessChart);
    END;

    LOCAL PROCEDURE SetValuesAt@1010(RemAmount@1000 : Decimal);
    BEGIN
      IF (RemAmount > CurrMaxRemAmount) AND (CurrMaxRemAmount > 0) THEN
        EXIT;
      TempSortingTable.INIT;
      TempSortingTable.Integer := NextEntryNo;
      NextEntryNo += 1;
      TempSortingTable.Decimal := RemAmount; // Used as buffer to store decimals and sort them later
      TempSortingTable.INSERT;
    END;

    EVENT BusinessChart@-1002::AddInReady@3();
    BEGIN
      AddInIsReady := TRUE;
      UpdateData;
    END;

    BEGIN
    END.
  }
}

