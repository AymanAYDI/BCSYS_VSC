OBJECT Table 9650 Custom Report Layout
{
  OBJECT-PROPERTIES
  {
    Date=31/10/14;
    Time=12:00:00;
    Version List=NAVW18.00.00.38457;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               TESTFIELD("Report ID");
               SetUpdated;
             END;

    OnModify=BEGIN
               TESTFIELD("Report ID");
               SetUpdated;
             END;

    CaptionML=[ENU=Custom Report Layout;
               FRA=Personnaliser pr‚sentation ‚tat];
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              FRA=ID] }
    { 2   ;   ;Report ID           ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Report));
                                                   CaptionML=[ENU=Report ID;
                                                              FRA=ID ‚tat] }
    { 3   ;   ;Report Name         ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Report),
                                                                                                                Object ID=FIELD(Report ID)));
                                                   CaptionML=[ENU=Report Name;
                                                              FRA=Nom ‚tat];
                                                   Editable=No }
    { 4   ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company Name;
                                                              FRA=Nom de la soci‚t‚] }
    { 6   ;   ;Type                ;Option        ;InitValue=Word;
                                                   CaptionML=[ENU=Type;
                                                              FRA=Type];
                                                   OptionCaptionML=[ENU=RDLC,Word;
                                                                    FRA=RDLC,Word];
                                                   OptionString=RDLC,Word }
    { 7   ;   ;Layout              ;BLOB          ;CaptionML=[ENU=Layout;
                                                              FRA=Mise en page] }
    { 8   ;   ;Last Modified       ;DateTime      ;CaptionML=[ENU=Last Modified;
                                                              FRA=DerniŠre modification];
                                                   Editable=No }
    { 9   ;   ;Last Modified by User;Code50       ;CaptionML=[ENU=Last Modified by User;
                                                              FRA=DerniŠre modification par l'utilisateur];
                                                   Editable=No }
    { 10  ;   ;File Extension      ;Text30        ;CaptionML=[ENU=File Extension;
                                                              FRA=Extension de fichier];
                                                   Editable=No }
    { 11  ;   ;Description         ;Text80        ;CaptionML=[ENU=Description;
                                                              FRA=D‚signation] }
    { 12  ;   ;Custom XML Part     ;BLOB          ;CaptionML=[ENU=Custom XML Part;
                                                              FRA=Composant XML personnalis‚] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Report ID,Company Name,Type              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ImportWordTxt@1000 : TextConst 'ENU=Import Word Document;FRA=Importer document Word';
      ImportRdlcTxt@1006 : TextConst 'ENU=Import Report Layout;FRA=Importer pr‚sentation ‚tat';
      FileFilterWordTxt@1001 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Word Files (*.docx)|*.docx;FRA=Fichiers Word (*.docx)|*.docx';
      FileFilterRdlcTxt@1005 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU="SQL Report Builder (*.rdl;*.rdlc)|*.rdl;*.rdlc";FRA="SQL Report Builder (*.rdl;*.rdlc)|*.rdl;*.rdlc"';
      NoRecordsErr@1002 : TextConst 'ENU=There is no record in the list.;FRA=La liste ne contient aucun enregistrement.';
      BuiltInTxt@1003 : TextConst 'ENU=Built-in layout;FRA=Pr‚sentation int‚gr‚e';
      CopyOfTxt@1004 : TextConst 'ENU=Copy of %1;FRA=Copie de %1';
      NewLayoutTxt@1007 : TextConst 'ENU=New layout;FRA=Nouvelle pr‚sentation';
      ErrorInLayoutErr@1008 : TextConst '@@@="%1=a name, %2=a number, %3=a sentence/error description.";ENU=Issue found in layout %1 for report ID  %2:\%3.;FRA=ProblŠme d‚tect‚ dans la disposition %1 pour l''ID ‚tat %2:\%3.';

    LOCAL PROCEDURE SetUpdated@2();
    BEGIN
      "Last Modified" := ROUNDDATETIME(CURRENTDATETIME);
      "Last Modified by User" := USERID;
    END;

    PROCEDURE InitBuiltInLayout@11(ReportID@1003 : Integer;LayoutType@1004 : Option);
    VAR
      CustomReportLayout@1002 : Record 9650;
      DocumentReportMgt@1005 : Codeunit 9651;
      InStr@1001 : InStream;
      OutStr@1000 : OutStream;
    BEGIN
      IF ReportID = 0 THEN
        EXIT;
      CustomReportLayout.INIT;
      CustomReportLayout."Report ID" := ReportID;
      CustomReportLayout.Type := LayoutType;
      CustomReportLayout.Description := COPYSTR(STRSUBSTNO(CopyOfTxt,BuiltInTxt),1,MAXSTRLEN(Description));

      CASE LayoutType OF
        CustomReportLayout.Type::Word:
          BEGIN
            CustomReportLayout.Layout.CREATEOUTSTREAM(OutStr);
            IF NOT REPORT.WORDLAYOUT(ReportID,InStr) THEN BEGIN
              DocumentReportMgt.NewWordLayout(ReportID,OutStr);
              CustomReportLayout.Description := COPYSTR(NewLayoutTxt,1,MAXSTRLEN(Description));
            END ELSE
              COPYSTREAM(OutStr,InStr);
          END;
        CustomReportLayout.Type::RDLC:
          BEGIN
            CustomReportLayout.Layout.CREATEOUTSTREAM(OutStr);
            IF REPORT.RDLCLAYOUT(ReportID,InStr) THEN
              COPYSTREAM(OutStr,InStr);
          END;
      END;

      InsertCustomXmlPart(CustomReportLayout);

      CustomReportLayout.ID := 0;
      CustomReportLayout.INSERT(TRUE);
    END;

    PROCEDURE InsertBuiltInLayout@13();
    VAR
      ReportLayoutLookup@1000 : Page 9651;
      ReportID@1001 : Integer;
    BEGIN
      FILTERGROUP(4);
      IF GETFILTER("Report ID") = '' THEN
        FILTERGROUP(0);
      IF GETFILTER("Report ID") <> '' THEN
        IF EVALUATE(ReportID,GETFILTER("Report ID")) THEN
          ReportLayoutLookup.SetReportID(ReportID);
      FILTERGROUP(0);
      IF ReportLayoutLookup.RUNMODAL = ACTION::OK THEN BEGIN
        IF ReportLayoutLookup.SelectedAddWordLayot THEN
          InitBuiltInLayout(ReportLayoutLookup.SelectedReportID,Type::Word);
        IF ReportLayoutLookup.SelectedAddRdlcLayot THEN
          InitBuiltInLayout(ReportLayoutLookup.SelectedReportID,Type::RDLC);
      END;
    END;

    PROCEDURE GetCustomRdlc@10(ReportID@1000 : Integer) : Text;
    VAR
      ReportLayoutSelection@1003 : Record 9651;
      InStream@1002 : InStream;
      RdlcTxt@1001 : Text;
      CustomLayoutID@1004 : Integer;
    BEGIN
      // Temporarily selected layout for Design-time report execution?
      IF ReportLayoutSelection.GetTempLayoutSelected <> 0 THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE  // Normal selection
        IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (CustomLayoutID <> 0) AND GET(CustomLayoutID) THEN BEGIN
        TESTFIELD(Type,Type::RDLC);
        IF UpdateLayout(TRUE) THEN
          COMMIT; // Save the updated layout
        CALCFIELDS(Layout);
        Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
      END ELSE
        REPORT.RDLCLAYOUT(ReportID,InStream);
      InStream.READ(RdlcTxt);

      EXIT(RdlcTxt);
    END;

    PROCEDURE CopyRecord@7();
    BEGIN
      IF ISEMPTY THEN
        ERROR(NoRecordsErr);
      CALCFIELDS(Layout);
      Description := COPYSTR(STRSUBSTNO(CopyOfTxt,Description),1,MAXSTRLEN(Description));
      ID := 0;
      CALCFIELDS("Custom XML Part");
      IF NOT "Custom XML Part".HASVALUE THEN
        InsertCustomXmlPart(Rec);

      INSERT(TRUE);
    END;

    PROCEDURE ImportLayout@6(DefaultFileName@1005 : Text);
    VAR
      TempBlob@1000 : Record 99008535;
      FileMgt@1001 : Codeunit 419;
      FileName@1003 : Text;
      FileFilterTxt@1002 : Text;
      ImportTxt@1004 : Text;
    BEGIN
      IF ISEMPTY THEN
        ERROR(NoRecordsErr);
      CASE Type OF
        Type::Word:
          BEGIN
            ImportTxt := ImportWordTxt;
            FileFilterTxt := FileFilterWordTxt;
          END;
        Type::RDLC:
          BEGIN
            ImportTxt := ImportRdlcTxt;
            FileFilterTxt := FileFilterRdlcTxt;
          END;
      END;
      FileName := FileMgt.BLOBImportWithFilter(TempBlob,ImportTxt,DefaultFileName,FileFilterTxt,FileFilterTxt);
      IF FileName = '' THEN
        EXIT;

      ImportLayoutBlob(TempBlob,UPPERCASE(FileMgt.GetExtension(FileName)));
    END;

    PROCEDURE ImportLayoutBlob@17(VAR TempBlob@1000 : Record 99008535;FileExtension@1001 : Text[30]);
    VAR
      OutputTempBlob@1008 : Record 99008535;
      DocumentReportMgt@1006 : Codeunit 9651;
      DocumentInStream@1007 : InStream;
      DocumentOutStream@1009 : OutStream;
      ErrorMessage@1010 : Text;
      XmlPart@1002 : Text;
    BEGIN
      // Layout is stored in the DocumentInStream (RDLC requires UTF8 encoding for which reason is stream is created in the case block.
      // Result is stored in the DocumentOutStream (..)
      TESTFIELD("Report ID");
      OutputTempBlob.Blob.CREATEOUTSTREAM(DocumentOutStream);
      XmlPart := REPORT.WORDXMLPART("Report ID",TRUE);

      CASE Type OF
        Type::Word:
          BEGIN
            // Run update
            TempBlob.Blob.CREATEINSTREAM(DocumentInStream);
            ErrorMessage := DocumentReportMgt.TryUpdateWordLayout(DocumentInStream,DocumentOutStream,'',XmlPart);
            // Validate the Word document layout against the layout of the current report
            IF ErrorMessage = '' THEN BEGIN
              COPYSTREAM(DocumentOutStream,DocumentInStream);
              DocumentReportMgt.ValidateWordLayout("Report ID",DocumentInStream,TRUE,TRUE);
            END;
          END;
        Type::RDLC:
          BEGIN
            // Update the Rdlc document layout against the layout of the current report
            TempBlob.Blob.CREATEINSTREAM(DocumentInStream,TEXTENCODING::UTF8);
            ErrorMessage := DocumentReportMgt.TryUpdateRdlcLayout("Report ID",DocumentInStream,DocumentOutStream,'',XmlPart);
          END;
      END;

      CLEAR(Layout);
      Layout := OutputTempBlob.Blob;

      IF FileExtension <> '' THEN
        "File Extension" := FileExtension;
      InsertCustomXmlPart(Rec);
      MODIFY(TRUE);
      COMMIT;

      IF ErrorMessage <> '' THEN
        MESSAGE(ErrorMessage);
    END;

    PROCEDURE ExportLayout@1(DefaultFileName@1003 : Text;ShowFileDialog@1002 : Boolean) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      FileMgt@1000 : Codeunit 419;
    BEGIN
      UpdateLayout(TRUE); // Don't block on errors (return false) as we in all cases want to have an export file to edit.

      IF NOT Layout.HASVALUE THEN
        EXIT;

      IF DefaultFileName = '' THEN
        DefaultFileName := '*.' + GetFileExtension;

      TempBlob.Blob := Layout;
      EXIT(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
    END;

    PROCEDURE ValidateLayout@14(useConfirm@1002 : Boolean;UpdateContext@1003 : Boolean) : Boolean;
    VAR
      DocumentReportMgt@1001 : Codeunit 9651;
      DocumentInStream@1000 : InStream;
    BEGIN
      CASE Type OF
        Type::Word:
          BEGIN
            CALCFIELDS(Layout);
            IF NOT Layout.HASVALUE THEN
              EXIT;

            // Validate the Word document template against the layout of the current report
            TESTFIELD("Report ID");
            Layout.CREATEINSTREAM(DocumentInStream);
            EXIT(DocumentReportMgt.ValidateWordLayout("Report ID",DocumentInStream,useConfirm,UpdateContext));
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE UpdateLayout@22(ContinueOnError@1007 : Boolean) : Boolean;
    VAR
      ErrorMessage@1008 : Text;
    BEGIN
      ErrorMessage := TryUpdateLayout;

      IF ErrorMessage = '' THEN BEGIN
        IF Type = Type::Word THEN
          EXIT(ValidateLayout(TRUE,TRUE));
        EXIT(TRUE); // We have no validate for RDLC
      END;

      ErrorMessage := STRSUBSTNO(ErrorInLayoutErr,Description,"Report ID",ErrorMessage);
      IF ContinueOnError THEN BEGIN
        MESSAGE(ErrorMessage);
        EXIT(TRUE);
      END;

      ERROR(ErrorMessage);
    END;

    PROCEDURE TryUpdateLayout@16() : Text;
    VAR
      TempBlob@1003 : Record 99008535;
      DocumentReportMgt@1004 : Codeunit 9651;
      DocumentInStream@1000 : InStream;
      DocumentOutStream@1001 : OutStream;
      PartStream@1005 : OutStream;
      WordXmlPart@1002 : Text;
      ErrorMessage@1007 : Text;
    BEGIN
      CALCFIELDS(Layout);
      IF NOT Layout.HASVALUE THEN
        EXIT('');

      CALCFIELDS("Custom XML Part");
      TESTFIELD("Custom XML Part");
      TESTFIELD("Report ID");

      WordXmlPart := REPORT.WORDXMLPART("Report ID",TRUE);

      CASE Type OF
        Type::Word:
          BEGIN
            Layout.CREATEINSTREAM(DocumentInStream);
            TempBlob.Blob.CREATEOUTSTREAM(DocumentOutStream);
            ErrorMessage := DocumentReportMgt.TryUpdateWordLayout(DocumentInStream,DocumentOutStream,GetCustomXmlPart,WordXmlPart);
          END;
        Type::RDLC:
          BEGIN
            Layout.CREATEINSTREAM(DocumentInStream,TEXTENCODING::UTF8);
            TempBlob.Blob.CREATEOUTSTREAM(DocumentOutStream,TEXTENCODING::UTF8);
            ErrorMessage := DocumentReportMgt.TryUpdateRdlcLayout(
                "Report ID",DocumentInStream,DocumentOutStream,GetCustomXmlPart,WordXmlPart);
          END;
      END;

      CLEAR("Custom XML Part");
      "Custom XML Part".CREATEOUTSTREAM(PartStream,TEXTENCODING::UTF16);
      PartStream.WRITE(WordXmlPart);
      IF TempBlob.Blob.HASVALUE THEN BEGIN
        CLEAR(Layout);
        Layout := TempBlob.Blob;
      END;
      MODIFY;

      EXIT(ErrorMessage);
    END;

    LOCAL PROCEDURE GetWordXML@8(VAR TempBlob@1001 : Record 99008535);
    VAR
      OutStr@1000 : OutStream;
    BEGIN
      TESTFIELD("Report ID");
      TempBlob.Blob.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF16);
      OutStr.WRITETEXT(REPORT.WORDXMLPART("Report ID"));
    END;

    PROCEDURE ExportSchema@9(DefaultFileName@1003 : Text;ShowFileDialog@1002 : Boolean) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      FileMgt@1000 : Codeunit 419;
    BEGIN
      TESTFIELD(Type,Type::Word);

      IF DefaultFileName = '' THEN
        DefaultFileName := '*.xml';

      GetWordXML(TempBlob);
      IF TempBlob.Blob.HASVALUE THEN
        EXIT(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
    END;

    PROCEDURE EditLayout@4();
    BEGIN
      UpdateLayout(TRUE); // Don't block on errors (return false) as we in all cases want to have an export file to edit.

      CASE Type OF
        Type::Word:
          CODEUNIT.RUN(CODEUNIT::"Edit MS Word Report Layout",Rec);
        Type::RDLC:
          CODEUNIT.RUN(CODEUNIT::"Edit RDLC Report Layout",Rec);
      END;
    END;

    LOCAL PROCEDURE GetFileExtension@12() : Text[4];
    BEGIN
      CASE Type OF
        Type::Word:
          EXIT('docx');
        Type::RDLC:
          EXIT('rdl');
      END;
    END;

    LOCAL PROCEDURE InsertCustomXmlPart@18(VAR CustomReportLayout@1000 : Record 9650);
    VAR
      OutStr@1002 : OutStream;
      WordXmlPart@1001 : Text;
    BEGIN
      // Store the current design as an extended WordXmlPart. This data is used for later updates / refactorings.
      CustomReportLayout."Custom XML Part".CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF16);
      WordXmlPart := REPORT.WORDXMLPART(CustomReportLayout."Report ID",TRUE);
      IF WordXmlPart <> '' THEN
        OutStr.WRITE(WordXmlPart);
    END;

    LOCAL PROCEDURE GetCustomXmlPart@19() XmlPart : Text;
    VAR
      InStr@1000 : InStream;
    BEGIN
      CALCFIELDS("Custom XML Part");
      IF NOT "Custom XML Part".HASVALUE THEN
        EXIT;

      "Custom XML Part".CREATEINSTREAM(InStr,TEXTENCODING::UTF16);
      InStr.READ(XmlPart);
    END;

    PROCEDURE RunCustomReport@3();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
    BEGIN
      IF "Report ID" = 0 THEN
        EXIT;

      ReportLayoutSelection.SetTempLayoutSelected(ID);
      REPORT.RUNMODAL("Report ID");
      ReportLayoutSelection.SetTempLayoutSelected(0);
    END;

    BEGIN
    END.
  }
}

