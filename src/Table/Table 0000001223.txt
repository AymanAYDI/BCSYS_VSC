OBJECT Table 1223 Posting Exch. Column Def
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ValidateRec;
             END;

    OnModify=BEGIN
               ValidateRec;
             END;

    OnDelete=VAR
               PostingExchFieldMapping@1000 : Record 1225;
               PostingExchColumnDef@1001 : Record 1223;
             BEGIN
               PostingExchFieldMapping.SETRANGE("Posting Exch. Def Code","Posting Exch. Def Code");
               PostingExchFieldMapping.SETRANGE("Posting Exch. Line Def Code","Posting Exch. Line Def Code");
               PostingExchFieldMapping.SETRANGE("Column No.","Column No.");
               IF NOT PostingExchFieldMapping.ISEMPTY THEN
                 IF CONFIRM(STRSUBSTNO(DeleteFieldMappingQst,PostingExchColumnDef.TABLECAPTION,PostingExchFieldMapping.TABLECAPTION)) THEN
                   PostingExchFieldMapping.DELETEALL
                 ELSE
                   ERROR('')
             END;

    CaptionML=[ENU=Posting Exch. Column Def;
               FRA=D‚f. colonne ‚chge compta.];
  }
  FIELDS
  {
    { 1   ;   ;Posting Exch. Def Code;Code20      ;TableRelation="Posting Exch. Def";
                                                   CaptionML=[ENU=Posting Exch. Def Code;
                                                              FRA=Code appellation ‚chge compta.];
                                                   NotBlank=Yes }
    { 2   ;   ;Column No.          ;Integer       ;CaptionML=[ENU=Column No.;
                                                              FRA=Nø colonne];
                                                   MinValue=1;
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text250       ;CaptionML=[ENU=Name;
                                                              FRA=Nom] }
    { 4   ;   ;Show                ;Boolean       ;CaptionML=[ENU=Show;
                                                              FRA=Afficher] }
    { 5   ;   ;Data Type           ;Option        ;CaptionML=[ENU=Data Type;
                                                              FRA=Type de donn‚es];
                                                   OptionCaptionML=[ENU=Text,Date,Decimal,DateTime;
                                                                    FRA=Texte,Date,D‚cimale,DateHeure];
                                                   OptionString=Text,Date,Decimal,DateTime }
    { 6   ;   ;Data Format         ;Text100       ;CaptionML=[ENU=Data Format;
                                                              FRA=Format donn‚es] }
    { 7   ;   ;Data Formatting Culture;Text10     ;CaptionML=[ENU=Data Formatting Culture;
                                                              FRA=Culture mise en forme donn‚es] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              FRA=D‚signation] }
    { 10  ;   ;Posting Exch. Line Def Code;Code20 ;TableRelation="Posting Exch. Line Def".Code WHERE (Posting Exch. Def Code=FIELD(Posting Exch. Def Code));
                                                   CaptionML=[ENU=Posting Exch. Line Def Code;
                                                              FRA=Code appellation ligne ‚chge compta.];
                                                   NotBlank=Yes }
    { 11  ;   ;Length              ;Integer       ;CaptionML=[ENU=Length;
                                                              FRA=Longueur] }
    { 12  ;   ;Constant            ;Text30        ;CaptionML=[ENU=Constant;
                                                              FRA=Fixe] }
    { 13  ;   ;Path                ;Text250       ;CaptionML=[ENU=Path;
                                                              FRA=Chemin] }
    { 14  ;   ;Negative-Sign Identifier;Text30    ;CaptionML=[ENU=Negative-Sign Identifier;
                                                              FRA=Identifiant signe n‚gatif] }
  }
  KEYS
  {
    {    ;Posting Exch. Def Code,Posting Exch. Line Def Code,Column No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DeleteFieldMappingQst@1001 : TextConst 'ENU=The %1 that you are about to delete is used for one or more %2, which will also be deleted. \\Do you want to continue?;FRA=Le %1 que vous ˆtes sur le point de supprimer est utilis‚ pour un ou plusieurs %2, qui seront ‚galement supprim‚s. \\Voulez-vous continuer ?';

    PROCEDURE InsertRec@7(PostExchDefCode@1000 : Code[20];PostExchLineDefCode@1007 : Code[20];ColumnNo@1001 : Integer;Name@1002 : Text[250];Show@1003 : Boolean;DataType@1004 : Option;DataTypeFormatting@1005 : Text[100];DataFormattingCulture@1006 : Text[10];Description@1008 : Text[50]);
    BEGIN
      INIT;
      VALIDATE("Posting Exch. Def Code",PostExchDefCode);
      VALIDATE("Posting Exch. Line Def Code",PostExchLineDefCode);
      VALIDATE("Column No.",ColumnNo);
      VALIDATE(Name,Name);
      VALIDATE(Show,Show);
      VALIDATE("Data Type",DataType);
      VALIDATE("Data Format",DataTypeFormatting);
      VALIDATE("Data Formatting Culture",DataFormattingCulture);
      VALIDATE(Description,Description);
      INSERT;
    END;

    PROCEDURE InsertRecForExport@2(PostExchDefCode@1000 : Code[20];PostExchLineDefCode@1002 : Code[20];ColumnNo@1001 : Integer;Name@1003 : Text[250];DataType@1005 : Option;DataFormat@1006 : Text[100];Length@1009 : Integer;Constant@1004 : Text[30]);
    BEGIN
      INIT;
      VALIDATE("Posting Exch. Def Code",PostExchDefCode);
      VALIDATE("Posting Exch. Line Def Code",PostExchLineDefCode);
      VALIDATE("Column No.",ColumnNo);
      VALIDATE(Name,Name);
      VALIDATE("Data Type",DataType);
      VALIDATE("Data Format",DataFormat);
      VALIDATE(Length,Length);
      VALIDATE(Constant,Constant);
      INSERT;
    END;

    PROCEDURE InsertRecForImport@3(PostExchDefCode@1020 : Code[20];PostExchLineDefCode@1019 : Code[20];ColumnNo@1018 : Integer;Name@1017 : Text[250];Description@1016 : Text[50];Show@1015 : Boolean;DataType@1014 : Option;DataFormat@1013 : Text[100];DataFormattingCulture@1012 : Text[10]);
    BEGIN
      INIT;
      VALIDATE("Posting Exch. Def Code",PostExchDefCode);
      VALIDATE("Posting Exch. Line Def Code",PostExchLineDefCode);
      VALIDATE("Column No.",ColumnNo);
      VALIDATE(Name,Name);
      VALIDATE(Description,Description);
      VALIDATE(Show,Show);
      VALIDATE("Data Type",DataType);
      VALIDATE("Data Format",DataFormat);
      VALIDATE("Data Formatting Culture",DataFormattingCulture);
      INSERT;
    END;

    PROCEDURE ValidateRec@1();
    VAR
      PostExchDef@1000 : Record 1222;
    BEGIN
      TESTFIELD("Posting Exch. Def Code");
      TESTFIELD("Column No.");

      PostExchDef.GET("Posting Exch. Def Code");

      IF PostExchDef."File Type" = PostExchDef."File Type"::"Fixed Text" THEN
        TESTFIELD(Length);

      IF IsDataFormatRequired THEN
        TESTFIELD("Data Format");

      IF IsDataFormattingCultureRequired THEN
        TESTFIELD("Data Formatting Culture");
    END;

    PROCEDURE IsDataFormatRequired@12() : Boolean;
    VAR
      PostingExchDef@1000 : Record 1222;
    BEGIN
      IF ("Data Type" = "Data Type"::Date) AND (NOT IsXML) THEN BEGIN
        PostingExchDef.GET("Posting Exch. Def Code");
        EXIT(PostingExchDef.Type <> PostingExchDef.Type::"Payment Export");
      END;

      IF ("Data Type" <> "Data Type"::Text) AND (NOT IsXML) THEN BEGIN
        PostingExchDef.GET("Posting Exch. Def Code");
        EXIT(PostingExchDef.Type = PostingExchDef.Type::"Payment Export");
      END;
    END;

    PROCEDURE IsDataFormattingCultureRequired@4() : Boolean;
    VAR
      PostingExchDef@1000 : Record 1222;
    BEGIN
      IF ("Data Type" <> "Data Type"::Text) AND (NOT IsXML) THEN BEGIN
        PostingExchDef.GET("Posting Exch. Def Code");
        EXIT(PostingExchDef.Type <> PostingExchDef.Type::"Payment Export");
      END;
    END;

    LOCAL PROCEDURE IsXML@8() : Boolean;
    VAR
      PostingExchDef@1000 : Record 1222;
    BEGIN
      PostingExchDef.GET("Posting Exch. Def Code");
      EXIT(PostingExchDef."File Type" = PostingExchDef."File Type"::Xml);
    END;

    PROCEDURE SetXMLDataFormattingValues@21(SimpleDataType@1000 : Text);
    VAR
      PostExchColDef@1001 : Record 1223;
    BEGIN
      CASE DELCHR(LOWERCASE(SimpleDataType)) OF
        'decimal':
          "Data Type" := PostExchColDef."Data Type"::Decimal;
        'date','datetime':
          "Data Type" := PostExchColDef."Data Type"::Date;
        ELSE
          "Data Type" := PostExchColDef."Data Type"::Text;
      END;
      MODIFY;
    END;

    PROCEDURE GetColumnNoFromPath@9(ParameterPath@1000 : Text) : Integer;
    BEGIN
      SETFILTER(Path,ParameterPath);
      FINDFIRST;
      EXIT("Column No.");
    END;

    PROCEDURE IsOfDataLine@10() : Boolean;
    VAR
      PostingExchDef@1001 : Record 1222;
      PostingExchLineDef@1000 : Record 1227;
    BEGIN
      PostingExchLineDef.GET("Posting Exch. Def Code","Posting Exch. Line Def Code");
      PostingExchDef.GET("Posting Exch. Def Code");

      IF (PostingExchDef."File Type" <> PostingExchDef."File Type"::Xml) OR (PostingExchLineDef."Data Line Tag" = '') THEN
        EXIT(TRUE);

      EXIT(STRPOS(Path,PostingExchLineDef."Data Line Tag") > 0);
    END;

    BEGIN
    END.
  }
}

