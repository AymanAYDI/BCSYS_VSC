OBJECT XMLport 50031 Import Group Invoice
{
  OBJECT-PROPERTIES
  {
    Date=30/08/16;
    Time=18:00:00;
    Modified=Yes;
    Version List=JX-VSC2.0-AUD;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rm,
                TableData 80=imd,
                TableData 232=imd,
                TableData 480=rim,
                TableData 481=rim;
    Direction=Import;
    OnPreXMLport=BEGIN
                   Grec_ImportInvoiceGroup.DELETEALL;
                 END;

    OnPostXMLport=BEGIN
                    CreateInvoice;
                  END;

    Format=Variable Text;
    FieldSeparator=[;];
    UseRequestPage=No;
    FileName=*.csv;
  }
  ELEMENTS
  {
    { [{094334DF-AEC4-412C-A997-2E9B5399152E}];  ;Root                ;Element ;Text     }

    { [{DB1FE33B-21D4-4D7C-BC3F-444CC636876B}];1 ;ImportGroupInvoice  ;Element ;Table   ;
                                                  SourceTable=Table2000000026;
                                                  AutoSave=No;
                                                  AutoUpdate=No;
                                                  AutoReplace=No;
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 Gint_Compteur += 1;//pour passer l'en tˆte du fichier
                                                                                 IF Gint_Compteur = 1 THEN
                                                                                 BEGIN
                                                                                   currXMLport.SKIP;
                                                                                 END;

                                                                                 //Insertion des enregistrements dans la table "Import Invoice Group"

                                                                                 //Colonnes A-->N insertion facture vente

                                                                                 //test si tous les champs sont vident partie ventes
                                                                                 IF NOT ((Gtext_Champ1 = '') AND
                                                                                   (Gtext_Champ2 = '') AND
                                                                                   (Gtext_Champ3 = '') AND
                                                                                   (Gtext_Champ4 = '') AND
                                                                                   (Gtext_Champ5 = '') AND
                                                                                   (Gtext_Champ6 = '') AND
                                                                                   (Gtext_Champ7 = '') AND
                                                                                   (Gtext_Champ8 = '') AND
                                                                                   (Gtext_Champ9 = '') AND
                                                                                   (Gtext_Champ10 = '') AND
                                                                                   (Gtext_Champ11 = '') AND
                                                                                   (Gtext_Champ12 = '') AND
                                                                                   (Gtext_Champ13 = ''))
                                                                                   THEN
                                                                                 BEGIN
                                                                                   Grec_ImportInvoiceGroup.INIT;
                                                                                   Grec_ImportInvoiceGroup."Invoice type" := Grec_ImportInvoiceGroup."Invoice type"::Sale;
                                                                                   Grec_ImportInvoiceGroup."Society code" := Gtext_Champ1;
                                                                                   Grec_ImportInvoiceGroup."Line No." := Gtext_Champ14;
                                                                                   Grec_ImportInvoiceGroup."Cus. Vend. No." := Gtext_Champ2;
                                                                                   EVALUATE(Grec_ImportInvoiceGroup."Posting date", FORMAT(TODAY));
                                                                                   EVALUATE(Grec_ImportInvoiceGroup."Document date", FORMAT(TODAY));
                                                                                   Grec_ImportInvoiceGroup."Assigned user ID" := USERID;
                                                                                   Grec_ImportInvoiceGroup."Your reference" := "Gcu_ANSI-ASCII".Ansi2Ascii(Gtext_Champ12);
                                                                                   Grec_ImportInvoiceGroup."External doc. No." := Gtext_Champ13;
                                                                                   Grec_ImportInvoiceGroup."Invoice No." := '';
                                                                                   Grec_ImportInvoiceGroup."Line type" := Grec_ImportInvoiceGroup."Line type"::"G/L Account";
                                                                                   Grec_ImportInvoiceGroup."Account No." := Gtext_Champ11;
                                                                                   Grec_ImportInvoiceGroup.Designation := "Gcu_ANSI-ASCII".Ansi2Ascii(Gtext_Champ3);
                                                                                   EVALUATE(Grec_ImportInvoiceGroup.Quantity,Gtext_Champ10);
                                                                                   Grec_ImportInvoiceGroup."Axe 0" := Gtext_Champ4;
                                                                                   Grec_ImportInvoiceGroup."Axe 1" := Gtext_Champ5;
                                                                                   Grec_ImportInvoiceGroup."Axe 2" := Gtext_Champ6;
                                                                                   Grec_ImportInvoiceGroup."Axe 3" := Gtext_Champ7;
                                                                                   Grec_ImportInvoiceGroup."Axe 4" := Gtext_Champ8;
                                                                                   Grec_ImportInvoiceGroup."Axe 5" := Gtext_Champ9;
                                                                                   //
                                                                                   Grec_ImportInvoiceGroup."Axe 6" := Gtext_Champ36;
                                                                                   Grec_ImportInvoiceGroup."Axe 7" := Gtext_Champ37;
                                                                                   Grec_ImportInvoiceGroup.INSERT;
                                                                                 END;

                                                                                 //Colonnes P-->AH insertion partie achat
                                                                                 IF NOT ((Gtext_Champ16 = '') AND
                                                                                   (Gtext_Champ17 = '') AND
                                                                                   (Gtext_Champ18 = '') AND
                                                                                   (Gtext_Champ19 = '') AND
                                                                                   (Gtext_Champ20 = '') AND
                                                                                   (Gtext_Champ21 = '') AND
                                                                                   (Gtext_Champ22 = '') AND
                                                                                   (Gtext_Champ23 = '') AND
                                                                                   (Gtext_Champ24 = '') AND
                                                                                   (Gtext_Champ25 = '') AND
                                                                                   (Gtext_Champ26 = '') AND
                                                                                   (Gtext_Champ27 = '') AND
                                                                                   (Gtext_Champ28 = '') AND
                                                                                   (Gtext_Champ29 = '') AND
                                                                                   (Gtext_Champ30 = '') AND
                                                                                   (Gtext_Champ31 = '') AND
                                                                                   (Gtext_Champ32 = '') AND
                                                                                   (Gtext_Champ33 = '') AND
                                                                                   (Gtext_Champ35 = ''))
                                                                                    THEN
                                                                                 BEGIN
                                                                                   Grec_ImportInvoiceGroup.INIT;
                                                                                   Grec_ImportInvoiceGroup."Invoice type" := Grec_ImportInvoiceGroup."Invoice type"::Purchase;
                                                                                   Grec_ImportInvoiceGroup."Society code" := Gtext_Champ16;
                                                                                   Grec_ImportInvoiceGroup."Line No." := Gtext_Champ34;
                                                                                   Grec_ImportInvoiceGroup."Cus. Vend. No." := Gtext_Champ17;
                                                                                   EVALUATE(Grec_ImportInvoiceGroup."Posting date", Gtext_Champ18);
                                                                                   EVALUATE(Grec_ImportInvoiceGroup."Document date", Gtext_Champ19);
                                                                                   Grec_ImportInvoiceGroup."Assigned user ID" := Gtext_Champ21;
                                                                                   Grec_ImportInvoiceGroup."Your reference" := "Gcu_ANSI-ASCII".Ansi2Ascii(Gtext_Champ32);
                                                                                   Grec_ImportInvoiceGroup."External doc. No." := '';
                                                                                   Grec_ImportInvoiceGroup."Invoice No." := Gtext_Champ33;
                                                                                   Grec_ImportInvoiceGroup."Line type" := Grec_ImportInvoiceGroup."Line type"::"G/L Account";
                                                                                   Grec_ImportInvoiceGroup."Account No." := Gtext_Champ23;
                                                                                   Grec_ImportInvoiceGroup.Designation := "Gcu_ANSI-ASCII".Ansi2Ascii(Gtext_Champ24);
                                                                                   EVALUATE(Grec_ImportInvoiceGroup.Quantity,Gtext_Champ31);
                                                                                   Grec_ImportInvoiceGroup."Axe 0" := Gtext_Champ25;
                                                                                   Grec_ImportInvoiceGroup."Axe 1" := Gtext_Champ26;
                                                                                   Grec_ImportInvoiceGroup."Axe 2" := Gtext_Champ27;
                                                                                   Grec_ImportInvoiceGroup."Axe 3" := Gtext_Champ28;
                                                                                   Grec_ImportInvoiceGroup."Axe 4" := Gtext_Champ29;
                                                                                   Grec_ImportInvoiceGroup."Axe 5" := Gtext_Champ30;
                                                                                   //
                                                                                   Grec_ImportInvoiceGroup."Axe 6" := Gtext_Champ36;
                                                                                   Grec_ImportInvoiceGroup."Axe 7" := Gtext_Champ37;
                                                                                   //
                                                                                   Grec_ImportInvoiceGroup."Gen. Prod. Posting Group" := Gtext_Champ35;
                                                                                   Grec_ImportInvoiceGroup.INSERT;
                                                                                 END;
                                                                               END;
                                                                                }

    { [{705E3C22-5192-484B-95C4-885DF7308394}];2 ;Gtext_Champ1        ;Element ;Text     }

    { [{ADFD8EB3-3D39-4E37-B507-A9221D07F8C8}];2 ;Gtext_Champ2        ;Element ;Text     }

    { [{F72712AD-F18B-4B31-90CC-2CF6CC596051}];2 ;Gtext_Champ3        ;Element ;Text     }

    { [{39E5B98B-50B7-4525-95BB-1829916AD264}];2 ;Gtext_Champ4        ;Element ;Text     }

    { [{8A9B9BAE-5697-44EC-9521-6179C05C6356}];2 ;Gtext_Champ5        ;Element ;Text     }

    { [{CC6AA3E2-A1E0-4E86-ABAE-D20AA79398DA}];2 ;Gtext_Champ6        ;Element ;Text     }

    { [{5D32829B-A412-475F-97DB-1A061A5FB675}];2 ;Gtext_Champ7        ;Element ;Text     }

    { [{FEF19003-3608-4A2D-A642-1F7474BBB251}];2 ;Gtext_Champ8        ;Element ;Text     }

    { [{035D3F73-645E-41D5-92CF-30879D9C3499}];2 ;Gtext_Champ9        ;Element ;Text     }

    { [{3F7B4DD9-18ED-4470-BBE7-8978EAA53F79}];2 ;Gtext_Champ10       ;Element ;Text     }

    { [{4721B5A5-C49D-47F2-9BEC-2B63EFF18E74}];2 ;Gtext_Champ11       ;Element ;Text     }

    { [{B3CD50AE-73B8-47C2-B09A-4FD6E77F14AE}];2 ;Gtext_Champ12       ;Element ;Text     }

    { [{7674990C-D17C-45BB-91D8-E3A014E851CD}];2 ;Gtext_Champ13       ;Element ;Text     }

    { [{67802F19-87E1-433A-AA13-8EDC5E7BD8C6}];2 ;Gtext_Champ14       ;Element ;Text     }

    { [{0E956569-9774-4A17-B056-0D006D50B37F}];2 ;Gtext_Champ15       ;Element ;Text     }

    { [{A8AE8C97-E49E-4BA1-B427-0D1BD77411AC}];2 ;Gtext_Champ16       ;Element ;Text     }

    { [{92B014E3-ABFE-4DCF-9E2A-323EFEC042CD}];2 ;Gtext_Champ17       ;Element ;Text     }

    { [{A7A2124E-7380-4221-A288-E46C5111616C}];2 ;Gtext_Champ18       ;Element ;Text     }

    { [{31AABF1F-37B7-4C59-83A5-4980B4DDB6B4}];2 ;Gtext_Champ19       ;Element ;Text     }

    { [{9783A6DF-81AD-45A4-8CCC-BEBCA8446BD1}];2 ;Gtext_Champ20       ;Element ;Text     }

    { [{B6C6B689-C6B0-4639-B092-1CCDD0DFF0B4}];2 ;Gtext_Champ21       ;Element ;Text     }

    { [{97E08E15-7D2E-4C6A-8278-09EB88772A50}];2 ;Gtext_Champ22       ;Element ;Text     }

    { [{64DE9C48-926E-4872-B80F-E4F3C2D5F710}];2 ;Gtext_Champ23       ;Element ;Text     }

    { [{7418247E-D1F8-4146-8BCF-DFA7F87302C9}];2 ;Gtext_Champ24       ;Element ;Text     }

    { [{2468C7AA-9757-41EA-BBB1-C5DDC137F28C}];2 ;Gtext_Champ25       ;Element ;Text     }

    { [{E7353006-45F8-4330-BD3F-98BE083F3860}];2 ;Gtext_Champ26       ;Element ;Text     }

    { [{D22E1C08-18F7-4B69-AD4A-DD4E1BE1E3B6}];2 ;Gtext_Champ27       ;Element ;Text     }

    { [{03E48702-9199-4C8F-975B-5BC967E25824}];2 ;Gtext_Champ28       ;Element ;Text     }

    { [{CC6EBA07-EB8A-4435-8135-CEA113A52F25}];2 ;Gtext_Champ29       ;Element ;Text     }

    { [{8048F81D-39C4-461B-800C-4DA16B6F68FF}];2 ;Gtext_Champ30       ;Element ;Text     }

    { [{FB9FA287-3052-4451-9414-FCBDD4E2E853}];2 ;Gtext_Champ31       ;Element ;Text     }

    { [{08E38AD1-20CD-4B54-A74C-F0133CDE9FA0}];2 ;Gtext_Champ32       ;Element ;Text     }

    { [{A56159A8-7E5C-40D3-8458-594EC2AEA4B6}];2 ;Gtext_Champ33       ;Element ;Text     }

    { [{6FD4E8D6-A333-4E55-8395-82D118DD9579}];2 ;Gtext_Champ34       ;Element ;Text     }

    { [{03CDA8E4-C7BF-49DE-8219-33DEF8691FAE}];2 ;Gtext_Champ35       ;Element ;Text     }

    { [{2DE50ABC-A21D-4FB5-9636-026355F19664}];2 ;Gtext_Champ36       ;Element ;Text     }

    { [{2AC3DF60-CC1A-4791-9AFE-A306FD4B1906}];2 ;Gtext_Champ37       ;Element ;Text     }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text0001@1000000019 : TextConst 'FRA=Le client "%1" n''existe pas ligne %2';
      Text0002@1000000018 : TextConst 'FRA=Erreur sur la conversion de la quantit‚ en decimal';
      Text0003@1000000017 : TextConst 'FRA=Le compte g‚n‚ral %1 n''existe pas';
      Text0004@1000000016 : TextConst 'FRA=Le champ Votre r‚f‚rence d‚passe les 30 caractŠres autoris‚s ligne %1';
      Text013@1000000015 : TextConst 'FRA=Le code "%1" pour la section analytique "%2" (Axe %6) n''existe pas pour la soci‚t‚ %3 (Nø Ligne Import %4, Qt‚ Import‚e %5)';
      Text009@1000000014 : TextConst 'FRA=Le fichier a bien ‚t‚ import‚.';
      Gint_Compteur@1000000037 : Integer;
      Grec_SalesHeader@1000000035 : Record 36;
      Grec_SalesLines@1000000034 : Record 37;
      Gint_LineNo@1000000033 : Integer;
      Grec_NoSeries@1000000032 : Record 308;
      Gbool_NoSoucheManuel@1000000031 : Boolean;
      Grec_LastNoSeriesLine@1000000030 : Record 309;
      Gcode_No@1000000029 : Code[20];
      Gdecimal_Quantite@1000000028 : Decimal;
      Grec_Dimension@1000000026 : Record 348;
      Grecord_GeneralLedgerSetup@1000000025 : Record 98;
      Gcode_Axe@1000000024 : ARRAY [50] OF Code[20];
      i@1000000023 : Integer;
      Grec_DefaultDimension@1000000022 : Record 352;
      Gtext_Colonne@1000000021 : ARRAY [14] OF Text[30];
      Grec_DimensionValue@1000000020 : Record 349;
      Grec_Customer@1000000013 : Record 18;
      Gtemporaire@1000000012 : TEMPORARY Record 50001;
      Gint_NumLigne@1000000011 : Integer;
      "Gcu_ANSI-ASCII"@1000000010 : Codeunit 50002;
      Grec_GLAccount@1000000009 : Record 15;
      Grec_ImportInvoiceGroup@1000000008 : Record 50012;
      Gtext_Company@1000000007 : Text[30];
      Gcode_SaleInvoiceNoSeries@1000000006 : Code[10];
      Gcode_PurchaseInvoiceNoSeries@1000000005 : Code[10];
      Grec_PurchaseHeader@1000000004 : Record 38;
      Grec_PurchaseLine@1000000003 : Record 39;
      Gtext_ChampAxe@1000000002 : ARRAY [6] OF Text[20];
      Gbool_Purchase@1000000001 : Boolean;
      Gbool_Sale@1000000000 : Boolean;
      Gcode_Section@1000000036 : ARRAY [50] OF Code[20];
      GLSetupShortcutDimCode@1000000038 : ARRAY [50] OF Code[20];
      HasGotGLSetup@1000000039 : Boolean;
      TempSetEntry@1000000043 : TEMPORARY Record 480;
      Debug@1000000046 : Boolean;
      Text002@1000000047 : TextConst 'ENU=This Shortcut Dimension is not defined in the %1.;FRA=Ce racourci axe n''est pas d‚fini dans les %1.';
      Text003@1000000048 : TextConst 'ENU=%1 is not an available %2 for that dimension.;FRA=%1 : %2 n''est pas un %3 disponible pour l''axe analytique %4.';
      Text018@1000000049 : TextConst 'ENU=%1 for %2 is missing.;FRA=%1 pour %2 est manquant.';
      DimErr@1000000050 : Text[250];
      Text014@1000000051 : TextConst 'ENU=%1 %2 is blocked.;FRA=%1 %2 est bloqu‚.';
      Text015@1000000052 : TextConst 'ENU=%1 %2 can''t be found.;FRA=%1 %2 ne peut ˆtre trouv‚.';
      Text016@1000000053 : TextConst 'ENU=%1 %2 - %3 is blocked.;FRA=%1 %2 - %3 est bloqu‚.';
      Text017@1000000054 : TextConst 'ENU=%1 for %2 %3 - %4 must not be %5.;FRA=%1 pour %2 %3 - %4 ne doit as ˆtre %5.';

    PROCEDURE CreateInvoice@1000000008();
    BEGIN
      Gcode_SaleInvoiceNoSeries := '';
      Gcode_PurchaseInvoiceNoSeries := '';
      Debug := FALSE;

      //lecture des lignes de la table Grec_ImportInvoiceGroup
      IF Grec_ImportInvoiceGroup.FIND('-') THEN
      REPEAT

        //Travail sur le nom de la soci‚t‚ + souche nø
        CASE Grec_ImportInvoiceGroup."Society code" OF
        'VSCG' :
          BEGIN
            Gtext_Company := 'VFEC';
            Gcode_SaleInvoiceNoSeries := 'VAP';
            Gcode_PurchaseInvoiceNoSeries := 'PI' ;
          END;
        'AGVSC' :
          BEGIN
            Gtext_Company := 'Agence';
            Gcode_SaleInvoiceNoSeries := 'VAP';
            Gcode_PurchaseInvoiceNoSeries := 'PI' ;
          END;
        'VSC' :
          BEGIN
            Gtext_Company := 'VSC';
            Gcode_SaleInvoiceNoSeries := 'VAP';
            Gcode_PurchaseInvoiceNoSeries := 'PI' ;
          END;
        'VSCT' :
          BEGIN
            Gtext_Company := 'VSCT';
            Gcode_SaleInvoiceNoSeries := 'VAP';
            Gcode_PurchaseInvoiceNoSeries := 'PI' ;
          END;
        ELSE
          ERROR('Ce code soci‚t‚ ' + Grec_ImportInvoiceGroup."Society code" +  ' est … param‚trer dans le code ');
        END;

        //changement de soci‚t‚ sur les diff‚rentes tables
        Grec_NoSeries.CHANGECOMPANY(Gtext_Company);
        Grec_LastNoSeriesLine.CHANGECOMPANY(Gtext_Company);
        Grec_SalesHeader.CHANGECOMPANY(Gtext_Company);
        Grec_SalesHeader.SetCompany(Gtext_Company);
        Grec_SalesLines.CHANGECOMPANY(Gtext_Company);
        Grec_SalesLines.SetCompany(Gtext_Company);
        Grec_PurchaseHeader.CHANGECOMPANY(Gtext_Company);
        Grec_PurchaseHeader.SetCompany(Gtext_Company);
        Grec_PurchaseLine.CHANGECOMPANY(Gtext_Company);
        Grec_PurchaseLine.SetCompany(Gtext_Company);
        Grecord_GeneralLedgerSetup.CHANGECOMPANY(Gtext_Company);
        Grec_DimensionValue.CHANGECOMPANY(Gtext_Company);
        RecuperationAxeSociete;

        //Travail sur le num‚ro de la ligne
        EVALUATE(Gint_LineNo,COPYSTR(Grec_ImportInvoiceGroup."Line No.",(STRPOS(Grec_ImportInvoiceGroup."Line No.", '_')+1)));
        Gint_LineNo := Gint_LineNo * 10000;

        CASE Grec_ImportInvoiceGroup."Invoice type" OF
        Grec_ImportInvoiceGroup."Invoice type"::Purchase :  //Traitement d'une facture achat
          BEGIN
            //entˆte
            IF  Gint_LineNo = 10000 THEN
            BEGIN
              ActivateNoSeries(Gcode_PurchaseInvoiceNoSeries);
              GetLastNoSeries(Gcode_PurchaseInvoiceNoSeries);//Avoir le num‚ro de facture
              InsertHeaderPurchaseInvoice(Grec_ImportInvoiceGroup);
              InsertLinePurchaseInvoice(Grec_ImportInvoiceGroup,Gcode_No, Gint_LineNo);
              DeactivateNoSeries(Gcode_PurchaseInvoiceNoSeries);
            END ELSE
            BEGIN
              //lignes
              InsertLinePurchaseInvoice(Grec_ImportInvoiceGroup,Gcode_No, Gint_LineNo);
            END;
            ValidateLastNoSeries(Gcode_No);//Validation du num‚ro de facture si tout est bon
          END;
        Grec_ImportInvoiceGroup."Invoice type"::Sale: //Traitement d'une facture vente
          BEGIN
            //entˆte
            IF  Gint_LineNo = 10000 THEN
            BEGIN
              ActivateNoSeries(Gcode_SaleInvoiceNoSeries);
              GetLastNoSeries(Gcode_SaleInvoiceNoSeries);//Avoir le  num‚ro de facture
              InsertHeaderSalesInvoice(Grec_ImportInvoiceGroup);
              InsertLineSalesInvoice(Grec_ImportInvoiceGroup, Gcode_No, Gint_LineNo);
              DeactivateNoSeries(Gcode_SaleInvoiceNoSeries);
            END ELSE
            BEGIN
             //lignes
              InsertLineSalesInvoice(Grec_ImportInvoiceGroup, Gcode_No, Gint_LineNo);
            END;
            ValidateLastNoSeries(Gcode_No);//Validation du num‚ro de facture si tout est bon
          END;
        END;
      //  Debug := FALSE;
      UNTIL Grec_ImportInvoiceGroup.NEXT =0;

      MESSAGE('Traitement termin‚');
      //Grec_ImportInvoiceGroup.DELETEALL;
    END;

    PROCEDURE InsertHeaderPurchaseInvoice@1000000000(Gloc_ImportInvoiceGroup@1000000000 : Record 50012);
    BEGIN
      //Pour des soucis de traitement on active temporairement la souche de nø manuel sur la soci‚t‚ en cours
      Grec_NoSeries.CHANGECOMPANY(COMPANYNAME);
      ActivateNoSeries(Gcode_PurchaseInvoiceNoSeries);

      Grec_PurchaseHeader.LOCKTABLE;
      Grec_PurchaseHeader.INIT;
      Grec_PurchaseHeader.VALIDATE(Grec_PurchaseHeader."Document Type", Grec_PurchaseHeader."Document Type"::Invoice);
      Grec_PurchaseHeader.VALIDATE(Grec_PurchaseHeader."No.",Gcode_No);
      Grec_PurchaseHeader.INSERT(TRUE);

      //on desactive ensuite cette souche sur la soci‚t‚ en cours
      DeactivateNoSeries(Gcode_PurchaseInvoiceNoSeries);
      Grec_NoSeries.CHANGECOMPANY(Gtext_Company);//on se remet sur la soci‚t‚ … int‚grer les factures

      Grec_PurchaseHeader.VALIDATE(Grec_PurchaseHeader."Buy-from Vendor No.", Gloc_ImportInvoiceGroup."Cus. Vend. No.");
      Grec_PurchaseHeader.VALIDATE(Grec_PurchaseHeader."Posting Date",Gloc_ImportInvoiceGroup."Posting date");
      Grec_PurchaseHeader.VALIDATE(Grec_PurchaseHeader."Document Date",Gloc_ImportInvoiceGroup."Document date");
      Grec_PurchaseHeader."No. Series" := Gcode_PurchaseInvoiceNoSeries;
      Grec_PurchaseHeader."Your Reference" := Gloc_ImportInvoiceGroup."Your reference";
      Grec_PurchaseHeader."Assigned User ID" := Gloc_ImportInvoiceGroup."Assigned user ID";
      Grec_PurchaseHeader."Original user" := Gloc_ImportInvoiceGroup."Assigned user ID";
      Grec_PurchaseHeader."Creation date" := TODAY;
      Grec_PurchaseHeader."Vendor Invoice No." := Gloc_ImportInvoiceGroup."Invoice No.";
      Grec_PurchaseHeader.MODIFY;

      IF Debug THEN
       MESSAGE('Achat %1 %2 %3 %4',Gtext_Company,Grec_PurchaseHeader."Document Type",Grec_PurchaseHeader."No.",Grec_PurchaseHeader."Buy-from Vendor No.");
    END;

    PROCEDURE InsertLinePurchaseInvoice@1000000002(Gloc_ImportInvoiceGroup@1000000000 : Record 50012;Gloc_NumInvoice@1000000001 : Code[10];Gloc_NumLigne@1000000002 : Integer);
    BEGIN
      IF Grec_PurchaseHeader.GET(Grec_PurchaseHeader."Document Type"::Invoice, Gcode_No) THEN
      BEGIN
        Grec_PurchaseLine.INIT;
        Grec_PurchaseLine.VALIDATE("Line No.",  Gloc_NumLigne);
        Grec_PurchaseLine."Document Type" := Grec_PurchaseLine."Document Type"::Invoice;  Grec_PurchaseLine.VALIDATE("Document No.",  Grec_PurchaseHeader."No.");
        Grec_PurchaseLine.VALIDATE(Type, Gloc_ImportInvoiceGroup."Line type");
        Grec_PurchaseLine.VALIDATE("No.",  Gloc_ImportInvoiceGroup."Account No.");
        Grec_PurchaseLine.VALIDATE("Gen. Prod. Posting Group", Gloc_ImportInvoiceGroup."Gen. Prod. Posting Group");
        Grec_PurchaseLine.Description := Gloc_ImportInvoiceGroup.Designation;
        Grec_PurchaseLine.VALIDATE(Quantity, Gloc_ImportInvoiceGroup.Quantity);
        Grec_PurchaseLine.VALIDATE(Grec_PurchaseLine."Direct Unit Cost",  1);
        Grec_PurchaseLine.VALIDATE("Unit of Measure Code", 'EUROS');
        Grec_PurchaseLine.INSERT;
      END;

      Ins‚rerAnalytiqueAchat(Grec_ImportInvoiceGroup."Axe 0", Grec_ImportInvoiceGroup."Axe 1", Grec_ImportInvoiceGroup."Axe 2"
                             , Grec_ImportInvoiceGroup."Axe 3", Grec_ImportInvoiceGroup."Axe 4", Grec_ImportInvoiceGroup."Axe 5"
                             , Grec_ImportInvoiceGroup."Axe 6", Grec_ImportInvoiceGroup."Axe 7");

      IF Debug THEN
       MESSAGE('Achat %1',Grec_PurchaseLine."Dimension Set ID");
    END;

    PROCEDURE InsertHeaderSalesInvoice@1000000003(Gloc_ImportInvoiceGroup@1000000000 : Record 50012);
    BEGIN
      //Pour des soucis de traitement on active temporairement la souche de nø manuel sur la soci‚t‚ en cours
      Grec_NoSeries.CHANGECOMPANY(COMPANYNAME);
      ActivateNoSeries(Gcode_SaleInvoiceNoSeries);

      Grec_SalesHeader.LOCKTABLE;
      Grec_SalesHeader.INIT;
      Grec_SalesHeader.VALIDATE(Grec_SalesHeader."Document Type", Grec_SalesHeader."Document Type"::Invoice);
      Grec_SalesHeader.VALIDATE(Grec_SalesHeader."No.",Gcode_No);
      Grec_SalesHeader.INSERT(TRUE);

      //on desactive ensuite cette souche sur la soci‚t‚ en cours
      DeactivateNoSeries(Gcode_SaleInvoiceNoSeries);
      Grec_NoSeries.CHANGECOMPANY(Gtext_Company);//on se remet sur la soci‚t‚ … int‚grer les factures

      Grec_SalesHeader.VALIDATE(Grec_SalesHeader."Sell-to Customer No.", Gloc_ImportInvoiceGroup."Cus. Vend. No.");
      Grec_SalesHeader."External Document No." := Gloc_ImportInvoiceGroup."External doc. No.";
      Grec_SalesHeader.VALIDATE(Grec_SalesHeader."Posting Date",TODAY);
      Grec_SalesHeader.VALIDATE(Grec_SalesHeader."Document Date",TODAY);
      Grec_SalesHeader."No. Series" := Gcode_SaleInvoiceNoSeries;
      Grec_SalesHeader."Your Reference" := Gloc_ImportInvoiceGroup."Your reference";
      Grec_SalesHeader."Assigned User ID" := Gloc_ImportInvoiceGroup."Assigned user ID";
      Grec_SalesHeader.MODIFY;

      IF Debug THEN
       MESSAGE('Vente %1 %2 %3 %4',Gtext_Company,Grec_SalesHeader."Document Type",Grec_SalesHeader."No.",Grec_SalesHeader."Sell-to Customer No.");
    END;

    PROCEDURE InsertLineSalesInvoice@1000000004(Gloc_ImportInvoiceGroup@1000000000 : Record 50012;Gloc_NumInvoice@1000000001 : Code[10];Gloc_NumLigne@1000000002 : Integer);
    BEGIN
      //Grec_SalesLines.CHANGECOMPANY(GTEXT_COMPANY);
      IF Grec_SalesHeader.GET(Grec_SalesHeader."Document Type"::Invoice, Gcode_No) THEN
      BEGIN
        Grec_SalesLines.INIT;
        Grec_SalesLines.VALIDATE("Line No.",  Gloc_NumLigne);
        Grec_SalesLines."Document Type" := Grec_SalesLines."Document Type"::Invoice;
        Grec_SalesLines.VALIDATE("Document No.",  Grec_SalesHeader."No.");
        Grec_SalesLines.VALIDATE(Type, Gloc_ImportInvoiceGroup."Line type");
        Grec_SalesLines.VALIDATE("No.",  Gloc_ImportInvoiceGroup."Account No.");
        Grec_SalesLines.Description := Gloc_ImportInvoiceGroup.Designation;
        Grec_SalesLines.VALIDATE(Quantity, Gloc_ImportInvoiceGroup.Quantity);
        Grec_SalesLines.VALIDATE("Unit Price",  1);
        Grec_SalesLines.VALIDATE("Unit of Measure Code",'EUROS');
        Grec_SalesLines.INSERT;
      END;

      Ins‚rerAnalytiqueVentes(Grec_ImportInvoiceGroup."Axe 0", Grec_ImportInvoiceGroup."Axe 1", Grec_ImportInvoiceGroup."Axe 2"
                              , Grec_ImportInvoiceGroup."Axe 3", Grec_ImportInvoiceGroup."Axe 4", Grec_ImportInvoiceGroup."Axe 5"
                              , Grec_ImportInvoiceGroup."Axe 6", Grec_ImportInvoiceGroup."Axe 7");

      IF Debug THEN
       MESSAGE('Vente %1',Grec_SalesLines."Dimension Set ID");
    END;

    PROCEDURE GetLastNoSeries@1000000028(NoSeriesName@1000000000 : Text[30]);
    BEGIN
      //traitement pour avoir le num‚ro de facture
      IF Grec_LastNoSeriesLine.GET(NoSeriesName,10000) THEN
      BEGIN
        Gcode_No := INCSTR(Grec_LastNoSeriesLine."Last No. Used");
      END;
    END;

    PROCEDURE ValidateLastNoSeries@1000000034(Gcode_No@1000000000 : Code[10]);
    BEGIN
      Grec_LastNoSeriesLine."Last No. Used" := Gcode_No;
      Grec_LastNoSeriesLine.MODIFY;
    END;

    PROCEDURE ActivateNoSeries@1000000014(NoSeriesName@1000000001 : Text[30]);
    BEGIN
      //Mettre le nø souche des facture vente ou achat en manuel de la soci‚t‚
      IF Grec_NoSeries.GET(NoSeriesName) THEN
      BEGIN
        IF NOT Grec_NoSeries."Manual Nos." THEN
        BEGIN
          Grec_NoSeries.VALIDATE(Grec_NoSeries."Manual Nos.",TRUE);
          Grec_NoSeries.MODIFY;
        END;
      END;
    END;

    PROCEDURE DeactivateNoSeries@1000000010(NoSeriesName@1000000000 : Text[30]);
    BEGIN
      //Enlever, le nø souche des facture vente ou achat en manuel de la soci‚t‚
      IF Grec_NoSeries.GET(NoSeriesName) THEN
      BEGIN
        Grec_NoSeries.VALIDATE(Grec_NoSeries."Manual Nos.",FALSE);
        Grec_NoSeries.MODIFY;
      END;
    END;

    PROCEDURE RecuperationAxeSociete@1000000012();
    BEGIN
      //r‚cup‚ration des codes axe analytique
      IF Grecord_GeneralLedgerSetup.FIND('-') THEN BEGIN
          Gcode_Axe[1] := Grecord_GeneralLedgerSetup."Shortcut Dimension 3 Code"; //Axe 0
          Gcode_Axe[2] := Grecord_GeneralLedgerSetup."Shortcut Dimension 4 Code"; //Axe 1
          Gcode_Axe[3] := Grecord_GeneralLedgerSetup."Shortcut Dimension 5 Code"; //Axe 2
          Gcode_Axe[4] := Grecord_GeneralLedgerSetup."Shortcut Dimension 6 Code"; //Axe 3
          Gcode_Axe[5] := Grecord_GeneralLedgerSetup."Shortcut Dimension 7 Code"; //Axe 4
          Gcode_Axe[6] := Grecord_GeneralLedgerSetup."Shortcut Dimension 8 Code"; //Axe 5
          Gcode_Axe[7] := Grecord_GeneralLedgerSetup."Shortcut Dimension 9 Code"; //Axe 6
          Gcode_Axe[8] := Grecord_GeneralLedgerSetup."Shortcut Dimension 10 Code"; //Axe 7
      END;
    END;

    LOCAL PROCEDURE "Ins‚rerAnalytiqueVentes"@1000000006(Section1@1000000006 : Code[20];Section2@1000000005 : Code[20];Section3@1000000004 : Code[20];Section4@1000000003 : Code[20];Section5@1000000002 : Code[20];Section6@1000000001 : Code[20];Section7@1000000000 : Code[20];Section8@1000000007 : Code[20]);
    BEGIN
      //Insertion des axes en rapport avec le fichier
      CLEAR(Gcode_Section);
      Gcode_Section[1] := Section1;
      Gcode_Section[2] := Section2;
      Gcode_Section[3] := Section3;
      Gcode_Section[4] := Section4;
      Gcode_Section[5] := Section5;
      Gcode_Section[6] := Section6;
      Gcode_Section[7] := Section7;
      Gcode_Section[8] := Section8;

      Grec_SalesLines."Dimension Set ID" := 0;
      FOR i := 1 TO 8 DO BEGIN
       //test si le code analytique existe
       IF (Gcode_Section[i] <> '') AND (Gcode_Axe[i] <> '') THEN BEGIN
        IF NOT Grec_DimensionValue.GET(Gcode_Axe[i],Gcode_Section[i]) THEN
         ERROR(STRSUBSTNO(Text013,Gcode_Section[i],Gcode_Axe[i],Gtext_Company,Grec_ImportInvoiceGroup."Line No.",Grec_ImportInvoiceGroup.Quantity,i));
       //Correction aprŠs lecture du fichier Excel si des 0 sont manquants lors d'une mise … jour par l'utilisateur.
        IF Gcode_Axe[i] = 'PERIODE' THEN
         IF STRLEN(Gcode_Section[i]) = 3 THEN
           Gcode_Section[i] := '0' + Gcode_Section[i]
         ELSE IF STRLEN(Gcode_Section[i]) = 2 THEN
           Gcode_Section[i] := '00' + Gcode_Section[i]
         ELSE IF STRLEN(Gcode_Section[i]) = 1 THEN
           Gcode_Section[i] := '000' + Gcode_Section[i];
       //Fin correction
       // Migration Nav 2015
        ValidateShortcutDimValues(i + 2,Gcode_Section[i],Grec_SalesLines."Dimension Set ID");
       END;
      END;

      Grec_SalesLines.MODIFY;
    END;

    PROCEDURE "Ins‚rerAnalytiqueAchat"@1000000001(Section1@1000000002 : Code[20];Section2@1000000003 : Code[20];Section3@1000000004 : Code[20];Section4@1000000005 : Code[20];Section5@1000000006 : Code[20];Section6@1000000007 : Code[20];Section7@1000000008 : Code[20];Section8@1000000001 : Code[20]);
    VAR
      Lcu_Dimension@1000000000 : Codeunit 408;
    BEGIN
      //Insertion des axes en rapport avec le fichier
      CLEAR(Gcode_Section);
      Gcode_Section[1] := Section1;
      Gcode_Section[2] := Section2;
      Gcode_Section[3] := Section3;
      Gcode_Section[4] := Section4;
      Gcode_Section[5] := Section5;
      Gcode_Section[6] := Section6;
      Gcode_Section[7] := Section7;
      Gcode_Section[8] := Section8;

      Grec_PurchaseLine."Dimension Set ID" := 0;
      FOR i := 1 TO 8 DO BEGIN
       //test si le code analytique existe
       IF (Gcode_Section[i] <> '') AND (Gcode_Axe[i] <> '') THEN BEGIN
        IF NOT Grec_DimensionValue.GET(Gcode_Axe[i],Gcode_Section[i]) THEN
         ERROR(STRSUBSTNO(Text013,Gcode_Section[i],Gcode_Axe[i],Gtext_Company,Grec_ImportInvoiceGroup."Line No.",Grec_ImportInvoiceGroup.Quantity,i));
       //Correction aprŠs lecture du fichier Excel si des 0 sont manquants lors d'une mise … jour par l'utilisateur.
        IF Gcode_Axe[i] = 'PERIODE' THEN
         IF STRLEN(Gcode_Section[i]) = 3 THEN
           Gcode_Section[i] := '0' + Gcode_Section[i]
         ELSE IF STRLEN(Gcode_Section[i]) = 2 THEN
           Gcode_Section[i] := '00' + Gcode_Section[i]
         ELSE IF STRLEN(Gcode_Section[i]) = 1 THEN
           Gcode_Section[i] := '000' + Gcode_Section[i];
       //Fin correction
       // Migration Nav 2015
        ValidateShortcutDimValues(i + 2,Gcode_Section[i],Grec_PurchaseLine."Dimension Set ID");
       END;
      END;

      Grec_PurchaseLine.MODIFY;
    END;

    PROCEDURE ValidateDimValueCode@22(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1002 : Record 349;
      GLSetup@1000000000 : Record 98;
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // Ajout du changecompany sur la variable locale
      DimVal.CHANGECOMPANY(Gtext_Company);
      GLSetup.CHANGECOMPANY(Gtext_Company);

      // --> Code fonction d'origine
      GLSetup.GET;
      GLSetupShortcutDimCode[1] := GLSetup."Shortcut Dimension 1 Code";
      GLSetupShortcutDimCode[2] := GLSetup."Shortcut Dimension 2 Code";
      GLSetupShortcutDimCode[3] := GLSetup."Shortcut Dimension 3 Code";
      GLSetupShortcutDimCode[4] := GLSetup."Shortcut Dimension 4 Code";
      GLSetupShortcutDimCode[5] := GLSetup."Shortcut Dimension 5 Code";
      GLSetupShortcutDimCode[6] := GLSetup."Shortcut Dimension 6 Code";
      GLSetupShortcutDimCode[7] := GLSetup."Shortcut Dimension 7 Code";
      GLSetupShortcutDimCode[8] := GLSetup."Shortcut Dimension 8 Code";
      GLSetupShortcutDimCode[9] := GLSetup."Shortcut Dimension 9 Code";
      GLSetupShortcutDimCode[10] := GLSetup."Shortcut Dimension 10 Code";

      IF (GLSetupShortcutDimCode[FieldNumber] = '') AND (ShortcutDimCode <> '') THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      IF ShortcutDimCode <> '' THEN BEGIN
        DimVal.SETRANGE(Code,ShortcutDimCode);
        IF NOT DimVal.FINDFIRST THEN BEGIN
          DimVal.SETFILTER(Code,STRSUBSTNO('%1*',ShortcutDimCode));
          IF DimVal.FINDFIRST THEN
            ShortcutDimCode := DimVal.Code
          ELSE
            ERROR(
              STRSUBSTNO(Text003,COMPANYNAME,
                ShortcutDimCode,DimVal.FIELDCAPTION(Code),GLSetupShortcutDimCode[FieldNumber]));
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimValues@127(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20];VAR DimSetID@1004 : Integer);
    VAR
      DimVal@1002 : Record 349;
      TempDimSetEntry@1005 : TEMPORARY Record 480;
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // Ajout du changecompany sur la variable locale
      DimVal.CHANGECOMPANY(Gtext_Company);

      // --> Code fonction d'origine
      ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimVal."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
      IF ShortcutDimCode <> '' THEN BEGIN
        DimVal.GET(DimVal."Dimension Code",ShortcutDimCode);
        IF NOT CheckDim(DimVal."Dimension Code") THEN
          ERROR(GetDimErr);
        IF NOT CheckDimValue(DimVal."Dimension Code",ShortcutDimCode) THEN
          ERROR(GetDimErr);
      END;
      GetDimensionSet(TempDimSetEntry,DimSetID);
      IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DimVal."Dimension Code") THEN
        IF TempDimSetEntry."Dimension Value Code" <> ShortcutDimCode THEN
          TempDimSetEntry.DELETE;
      IF ShortcutDimCode <> '' THEN BEGIN
        TempDimSetEntry."Dimension Code" := DimVal."Dimension Code";
        TempDimSetEntry."Dimension Value Code" := DimVal.Code;
        TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
        IF TempDimSetEntry.INSERT THEN;
      END;
      DimSetID := GetDimensionSetID(TempDimSetEntry);
    END;

    PROCEDURE GetDimensionSet@124(VAR TempDimSetEntry@1000 : TEMPORARY Record 480;DimSetID@1001 : Integer);
    VAR
      DimSetEntry2@1002 : Record 480;
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // --> Code fonction d'origine
      TempDimSetEntry.DELETEALL;
      DimSetEntry2.CHANGECOMPANY(Gtext_Company);
      WITH DimSetEntry2 DO BEGIN
        SETRANGE("Dimension Set ID",DimSetID);
        IF FINDSET THEN
          REPEAT
            TempDimSetEntry := DimSetEntry2;
            TempDimSetEntry.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetDimensionSetID@3(VAR DimSetEntry@1000 : Record 480) : Integer;
    VAR
      DimSetEntry2@1001 : Record 480;
      DimSetTreeNode@1002 : Record 481;
      Found@1003 : Boolean;
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // Ajout du changecompany sur la variable locale
      DimSetEntry2.CHANGECOMPANY(Gtext_Company);
      DimSetTreeNode.CHANGECOMPANY(Gtext_Company);

      // --> Code fonction d'origine
      DimSetEntry2.COPY(DimSetEntry);
      IF DimSetEntry."Dimension Set ID" > 0 THEN
        DimSetEntry.SETRANGE("Dimension Set ID",DimSetEntry."Dimension Set ID");

      DimSetEntry.SETCURRENTKEY("Dimension Value ID");
      DimSetEntry.SETFILTER("Dimension Code",'<>%1','');
      DimSetEntry.SETFILTER("Dimension Value Code",'<>%1','');

      IF NOT DimSetEntry.FINDSET THEN
        EXIT(0);

      Found := TRUE;
      DimSetTreeNode."Dimension Set ID" := 0;
      REPEAT
        DimSetEntry.TESTFIELD("Dimension Value ID");
        IF Found THEN
          IF NOT DimSetTreeNode.GET(DimSetTreeNode."Dimension Set ID",DimSetEntry."Dimension Value ID") THEN BEGIN
            Found := FALSE;
            DimSetTreeNode.LOCKTABLE;
          END;
        IF NOT Found THEN BEGIN
          DimSetTreeNode."Parent Dimension Set ID" := DimSetTreeNode."Dimension Set ID";
          DimSetTreeNode."Dimension Value ID" := DimSetEntry."Dimension Value ID";
          DimSetTreeNode."Dimension Set ID" := 0;
          DimSetTreeNode."In Use" := FALSE;
          IF NOT DimSetTreeNode.INSERT(TRUE) THEN
            DimSetTreeNode.GET(DimSetTreeNode."Parent Dimension Set ID",DimSetTreeNode."Dimension Value ID");
        END;
      UNTIL DimSetEntry.NEXT = 0;
      IF NOT DimSetTreeNode."In Use" THEN BEGIN
        IF Found THEN BEGIN
          DimSetTreeNode.LOCKTABLE;
          DimSetTreeNode.GET(DimSetTreeNode."Parent Dimension Set ID",DimSetTreeNode."Dimension Value ID");
        END;
        DimSetTreeNode."In Use" := TRUE;
        DimSetTreeNode.MODIFY;
        InsertDimSetEntries(DimSetEntry,DimSetTreeNode."Dimension Set ID");
      END;

      DimSetEntry.COPY(DimSetEntry2);

      EXIT(DimSetTreeNode."Dimension Set ID");
    END;

    LOCAL PROCEDURE InsertDimSetEntries@13(VAR DimSetEntry@1000 : Record 480;NewID@1001 : Integer);
    VAR
      DimSetEntry2@1002 : Record 480;
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // Ajout du changecompany sur la variable locale
      DimSetEntry2.CHANGECOMPANY(Gtext_Company);
      // --> Code fonction d'origine
      DimSetEntry2.LOCKTABLE;
      IF DimSetEntry.FINDSET THEN
        REPEAT
          DimSetEntry2 := DimSetEntry;
          DimSetEntry2."Dimension Set ID" := NewID;
          DimSetEntry2.INSERT;
        UNTIL DimSetEntry.NEXT = 0;
    END;

    PROCEDURE CheckDim@60(DimCode@1000 : Code[20]) : Boolean;
    VAR
      Dim@1001 : Record 348;
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // Ajout du changecompany sur la variable locale
      Dim.CHANGECOMPANY(Gtext_Company);
      // --> Code fonction d'origine
      IF Dim.GET(DimCode) THEN BEGIN
        IF Dim.Blocked THEN BEGIN
          DimErr :=
            STRSUBSTNO(Text014,Dim.TABLECAPTION,DimCode);
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        DimErr :=
          STRSUBSTNO(Text015,Dim.TABLECAPTION,DimCode);
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckDimValue@61(DimCode@1000 : Code[20];DimValCode@1001 : Code[20]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // Ajout du changecompany sur la variable locale
      DimVal.CHANGECOMPANY(Gtext_Company);
      // --> Code fonction d'origine
      IF (DimCode <> '') AND (DimValCode <> '') THEN BEGIN
        IF DimVal.GET(DimCode,DimValCode) THEN BEGIN
          IF DimVal.Blocked THEN BEGIN
            DimErr :=
              STRSUBSTNO(
                Text016,DimVal.TABLECAPTION,DimCode,DimValCode);
            EXIT(FALSE);
          END;
          IF NOT (DimVal."Dimension Value Type" IN
                  [DimVal."Dimension Value Type"::Standard,
                   DimVal."Dimension Value Type"::"Begin-Total"])
          THEN BEGIN
            DimErr :=
              STRSUBSTNO(Text017,DimVal.FIELDCAPTION("Dimension Value Type"),
                DimVal.TABLECAPTION,DimCode,DimValCode,FORMAT(DimVal."Dimension Value Type"));
            EXIT(FALSE);
          END;
        END ELSE BEGIN
          DimErr :=
            STRSUBSTNO(
              Text018,DimVal.TABLECAPTION,DimCode);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDimErr@71() : Text[250];
    BEGIN
      // Migration Nav 2015 : Fonction copi‚e … partir du codeunit 408
      // --> Code fonction d'origine
      EXIT(DimErr);
    END;

    BEGIN
    {
      //JX-AUD CREATION du 10/04/14

      // Migration Nav 2015 : Fonctions copi‚es … partir du codeunit 408
              ValidateDimValueCode
              ValidateShortcutDimValues
              GetDimensionSet
              GetDimensionSetID
              InsertDimSetEntries
              CheckDim
              CheckDimValue
              GetDimErr
    }
    END.
  }
}

