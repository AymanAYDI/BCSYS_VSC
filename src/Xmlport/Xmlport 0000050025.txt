OBJECT XMLport 50025 Yooz Purch. Inv.&CrM. Imp. Aut
{
  OBJECT-PROPERTIES
  {
    Date=21/12/15;
    Time=15:30:00;
    Modified=Yes;
    Version List=JX-VSC2.0-AUD,,JX-YOOZ2AUTO;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Yooz Purch. Inv.&CrM. Imp. Aut;
               FRA=Yooz import facture & Avoir achat Automatique];
    Direction=Import;
    OnPostXMLport=BEGIN
                    IF GUIALLOWED THEN
                     IF NbOComp = 0 THEN
                      MESSAGE(STRSUBSTNO(Text020,NbOk))
                     ELSE
                      MESSAGE(STRSUBSTNO(Text021,NbOk,NbOComp,OComp));
                  END;

    Format=Variable Text;
    FieldDelimiter=<None>;
    FieldSeparator=[;];
    UseRequestPage=No;
    FileName=*.csv;
  }
  ELEMENTS
  {
    { [{094334DF-AEC4-412C-A997-2E9B5399152E}];  ;Root                ;Element ;Text     }

    { [{DB1FE33B-21D4-4D7C-BC3F-444CC636876B}];1 ;Yooz                ;Element ;Table   ;
                                                  SourceTable=Table2000000026;
                                                  AutoSave=No;
                                                  AutoUpdate=No;
                                                  AutoReplace=No;
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 Gint_Compteur :=  Gint_Compteur + 1;
                                                                                 IF  (Gint_Compteur > 1) THEN BEGIN
                                                                                  CompName := '';
                                                                                  CASE Gtext_Champ1 OF
                                                                                   'VSCG':
                                                                                     CompName := 'VFEC';
                                                                                   'AGVSC':
                                                                                     CompName := 'Agence';
                                                                                   'VSC':
                                                                                     CompName := 'VSC';
                                                                                   'VSCT' :
                                                                                     CompName := 'VSCT';
                                                                                  END;

                                                                                  IF CompName <> '' THEN BEGIN
                                                                                   Grec_PurchaseHeader.CHANGECOMPANY(CompName);
                                                                                   Grec_PurchaseHeader2.CHANGECOMPANY(CompName);
                                                                                   PurchSetup.CHANGECOMPANY(CompName);
                                                                                   PurchSetup.GET;
                                                                                   NoSeries.CHANGECOMPANY(CompName);
                                                                                   LastNoSeriesLine.CHANGECOMPANY(CompName);
                                                                                   //On test si la facture Yooz aurait d‚j… ‚t‚ int‚gr‚e
                                                                                   Grec_PurchaseHeader2.RESET;
                                                                                   Grec_PurchaseHeader2.SETFILTER(Grec_PurchaseHeader2."Yooz No.", Gtext_Champ9);
                                                                                   IF NOT Grec_PurchaseHeader2.FINDFIRST THEN BEGIN //Si la facture n'y est pas on l'intŠgre
                                                                                     NbOk += 1;
                                                                                     //Cr‚ation de l'entˆte de la facture achat
                                                                                     Grec_PurchaseHeader.INIT;
                                                                                     // JX-YOOZ2 13/11/15 Ajout champ document type Facture ou Avoir
                                                                                     IF UPPERCASE(Gtext_Champ12) = 'FACTURE' THEN BEGIN
                                                                                      Grec_PurchaseHeader.VALIDATE("Document Type", Grec_PurchaseHeader."Document Type"::Invoice);
                                                                                      Grec_PurchaseHeader."Vendor Invoice No." := Gtext_Champ6; //Nø facture fournisseur
                                                                                      Grec_PurchaseHeader."No." := '';
                                                                                      EVALUATE(Grec_PostingDate,Gtext_Champ3); //Date comptable
                                                                                      Grec_PurchaseHeader."Posting Date" := Grec_PostingDate;
                                                                                      Grec_PurchaseHeader."No. Series" := PurchSetup."Invoice Nos.";
                                                                                      InitSeries(PurchSetup."Invoice Nos.",'',Grec_PurchaseHeader."Posting Date",
                                                                                                                             Grec_PurchaseHeader."No.",Grec_PurchaseHeader."No. Series");
                                                                                     END ELSE BEGIN
                                                                                      Grec_PurchaseHeader.VALIDATE("Document Type", Grec_PurchaseHeader."Document Type"::"Credit Memo");
                                                                                      Grec_PurchaseHeader."Vendor Cr. Memo No." := Gtext_Champ6; //Nø avoir fournisseur
                                                                                      Grec_PurchaseHeader."No." := '';
                                                                                      EVALUATE(Grec_PostingDate,Gtext_Champ3); //Date comptable
                                                                                      Grec_PurchaseHeader."Posting Date" := Grec_PostingDate;
                                                                                      Grec_PurchaseHeader."No. Series" := PurchSetup."Credit Memo Nos.";
                                                                                      InitSeries(PurchSetup."Credit Memo Nos.",'',Grec_PurchaseHeader."Posting Date",
                                                                                                                             Grec_PurchaseHeader."No.",Grec_PurchaseHeader."No. Series");
                                                                                     END;
                                                                                     Grec_PurchaseHeader."Buy-from Vendor No." := Gtext_Champ2;  //entite facturante/cpte feur
                                                                                     Grec_PurchaseHeader.INSERT;

                                                                                     EVALUATE(Grec_DocumentDate,Gtext_Champ4); //Date document
                                                                                     Grec_PurchaseHeader."Document Date" := Grec_DocumentDate;

                                                                                     IF (STRPOS(Gtext_Champ5,'GROUPEVSC\') = 0) OR (STRPOS(Gtext_Champ5,'\') = 0) THEN
                                                                                      Gtext_Champ5 := 'GROUPEVSC\' + Gtext_Champ5;
                                                                                     Grec_PurchaseHeader."Assigned User ID" := Gtext_Champ5; //Code collaborateur affect‚

                                                                                     Grec_PurchaseHeader."Vendor Invoice No." := Gtext_Champ6; //Nø facture fournisseur
                                                                                     EVALUATE(Gdec_AmoutExlVAT,Gtext_Champ7); //Montant HT
                                                                                     Grec_PurchaseHeader."Register amount" := Gdec_AmoutExlVAT;
                                                                                     Grec_PurchaseHeader."BC No." := Gtext_Champ8;  //Nø bon de commande
                                                                                     Grec_PurchaseHeader."Yooz No." := Gtext_Champ9; //Nø Yooz
                                                                                     Grec_PurchaseHeader."Yooz Token link" := Gtext_Champ10; //Lien Token Yooz
                                                                                     EVALUATE(Grec_ReceiptInvoiceDate,Gtext_Champ11); //Daten de scan yooz
                                                                                     Grec_PurchaseHeader."Invoice receipt date" := Grec_ReceiptInvoiceDate;
                                                                                     Grec_PurchaseHeader.MODIFY;
                                                                                   END;
                                                                                  END ELSE BEGIN
                                                                                   NbOComp += 1;
                                                                                   IF STRPOS(OComp,Gtext_Champ1) = 0 THEN
                                                                                    IF OComp = '' THEN
                                                                                     OComp := Gtext_Champ1
                                                                                    ELSE
                                                                                     OComp := OComp + '/' + Gtext_Champ1;
                                                                                  END;
                                                                                 END;
                                                                               END;
                                                                                }

    { [{18A2A756-F084-4EBF-8689-60C1DC266417}];2 ;Gtext_Champ1        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ1 }

    { [{8A165EA3-3DB4-4384-80C2-4455C4A92525}];2 ;Gtext_Champ2        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ2 }

    { [{32051069-43DB-4B34-B734-A678408CD4C3}];2 ;Gtext_Champ3        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ3 }

    { [{F93B0593-EC87-4B15-A86C-D69D61186955}];2 ;Gtext_Champ4        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ4 }

    { [{51924B73-51B2-4917-B44E-FF680DE0393B}];2 ;Gtext_Champ5        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ5 }

    { [{3BBB4ABD-3D5F-4094-A18A-6291E6F698A1}];2 ;Gtext_Champ6        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ6 }

    { [{58D7B173-036C-4B0E-8D4C-D28472B1B349}];2 ;Gtext_Champ7        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ7 }

    { [{1B1EFEFA-CD0C-4803-8C7E-ECB022243A2E}];2 ;Gtext_Champ8        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ8 }

    { [{E7F11536-25A9-4369-90FA-FE33E50491C2}];2 ;Gtext_Champ9        ;Element ;Text    ;
                                                  VariableName=Gtext_Champ9 }

    { [{C387EFAA-E991-4730-BD05-6C463FE23B18}];2 ;Gtext_Champ10       ;Element ;Text    ;
                                                  VariableName=Gtext_Champ10 }

    { [{264FD376-92A9-4FD2-A9BD-0CE1C040B136}];2 ;Gtext_Champ11       ;Element ;Text    ;
                                                  VariableName=Gtext_Champ11 }

    { [{6A37D421-70C0-4877-B01D-7EFB22D79270}];2 ;Gtext_Champ12       ;Element ;Text    ;
                                                  VariableName=Gtext_Champ12 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Gint_Compteur@1000000006 : Integer;
      PurchSetup@1000000029 : Record 312;
      Grec_PurchaseHeader@1000000005 : Record 38;
      Grec_PurchaseHeader2@1000000004 : Record 38;
      NoSeries@1000000014 : Record 308;
      LastNoSeriesLine@1000000013 : Record 309;
      Grec_PostingDate@1000000003 : Date;
      Grec_DocumentDate@1000000002 : Date;
      Gdec_AmoutExlVAT@1000000001 : Decimal;
      Grec_ReceiptInvoiceDate@1000000000 : Date;
      NbOk@1000000007 : Integer;
      NbOComp@1000000009 : Integer;
      OComp@1000000011 : Text;
      CompName@1000000012 : Text;
      Text001@1000000030 : TextConst 'ENU=If you want to enter numbers manually, please activate %1 in %2 %3.;FRA=Si vous souhaitez entrer les num‚ros manuellement, vous devez activer %1 dans %2 %3.';
      Text002@1000000031 : TextConst 'ENU="It is not possible to assign numbers automatically. ";FRA="Il n''est pas possible d''attribuer automatiquement des num‚ros. "';
      Text003@1000000015 : TextConst 'ENU=If you want the program to assign numbers automatically, please activate %1 in %2 %3.;FRA=Si vous souhaitez que le programme attribue automatiquement des num‚ros, vous devez activer %1 %2 dans %3.';
      NoSeriesCode@1000000016 : Code[10];
      Text004@1000000020 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.;FRA=Vous ne pouvez pas attribuer de nouveaux num‚ros … partir de la souche de num‚ros %1 dans %2.';
      Text005@1000000019 : TextConst 'ENU=You cannot assign new numbers from the number series %1.;FRA=Vous ne pouvez pas attribuer de nouveaux num‚ros … partir de la souche de num‚ros %1.';
      Text006@1000000018 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.;FRA=Vous ne pouvez pas attribuer de nouveaux num‚ros … partir de la souche de num‚ros %1 pour une date ant‚rieure au %2.';
      Text007@1000000017 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.;FRA=Vous ne pouvez pas attribuer de num‚ros sup‚rieurs … %1 … partir de la souche de num‚ros %2.';
      WarningNoSeriesCode@1000000021 : Code[10];
      TryNoSeriesCode@1000000024 : Code[10];
      TrySeriesDate@1000000023 : Date;
      TryNo@1000000022 : Code[20];
      Text000@1000000025 : TextConst 'ENU="You may not enter numbers manually. ";FRA="Vous ne souhaitez peut-ˆtre pas entrer les num‚ros manuellement. "';
      Text008@1000000028 : TextConst 'ENU=%1 must contain a number.;FRA=Le champ %1 doit contenir un num‚ro.';
      Text009@1000000027 : TextConst 'ENU=The number format in %1 must be the same as the number format in %2.;FRA=Le format de num‚ro dans %1 doit ˆtre identique … celui de %2.';
      Text010@1000000026 : TextConst 'ENU=The number %1 cannot be extended to more than 20 characters.;FRA=Le num‚ro %1 ne peut pas ˆtre ‚tendu … plus de 20 caractŠres.';
      Text020@1000000010 : TextConst 'ENU=Yooz Invoices are integrated;FRA=%1 facture(s) Yooz import‚e(s).';
      Text021@1000000008 : TextConst 'FRA=%1 facture(s) Yooz import‚e(s).\%2 facture(s) … importer dans les soci‚t‚s %3.';

    PROCEDURE InitSeries@3(DefaultNoSeriesCode@1000 : Code[10];OldNoSeriesCode@1001 : Code[10];NewDate@1002 : Date;VAR NewNo@1003 : Code[20];VAR NewNoSeriesCode@1004 : Code[10]);
    BEGIN
      IF NewNo = '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NOT NoSeries."Default Nos." THEN
          ERROR(
            Text002 +
            Text003,
            NoSeries.FIELDCAPTION("Default Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
        IF OldNoSeriesCode <> '' THEN BEGIN
          NoSeriesCode := DefaultNoSeriesCode;
          FilterSeries;
          NoSeries.Code := OldNoSeriesCode;
          IF NOT NoSeries.FIND THEN
            NoSeries.GET(DefaultNoSeriesCode);
        END;
        NewNo := GetNextNo(NoSeries.Code,NewDate,TRUE);
        NewNoSeriesCode := NoSeries.Code;
      END ELSE
        TestManual(DefaultNoSeriesCode);
    END;

    LOCAL PROCEDURE FilterSeries@1();
    VAR
      NoSeriesRelationship@1000 : Record 310;
    BEGIN
      NoSeries.RESET;
      NoSeriesRelationship.SETRANGE(Code,NoSeriesCode);
      IF NoSeriesRelationship.FINDSET THEN
        REPEAT
          NoSeries.Code := NoSeriesRelationship."Series Code";
          NoSeries.MARK := TRUE;
        UNTIL NoSeriesRelationship.NEXT = 0;
      NoSeries.GET(NoSeriesCode);
      NoSeries.MARK := TRUE;
      NoSeries.MARKEDONLY := TRUE;
    END;

    PROCEDURE GetNextNo@12(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean) : Code[20];
    BEGIN
      EXIT(GetNextNo3(NoSeriesCode,SeriesDate,ModifySeries,FALSE));
    END;

    PROCEDURE GetNextNo3@22(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean;NoErrorsOrWarnings@1004 : Boolean) : Code[20];
    VAR
      NoSeriesLine@1003 : Record 309;
    BEGIN
      IF SeriesDate = 0D THEN
        SeriesDate := WORKDATE;

      IF ModifySeries OR (LastNoSeriesLine."Series Code" = '') THEN BEGIN
        IF ModifySeries THEN
          NoSeriesLine.LOCKTABLE;
        NoSeries.GET(NoSeriesCode);
        SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
        IF NOT NoSeriesLine.FINDFIRST THEN BEGIN
          IF NoErrorsOrWarnings THEN
            EXIT('');
          NoSeriesLine.SETRANGE("Starting Date");
          IF NOT NoSeriesLine.ISEMPTY THEN
            ERROR(
              Text004,
              NoSeriesCode,SeriesDate);
          ERROR(
            Text005,
            NoSeriesCode);
        END;
      END ELSE
        NoSeriesLine := LastNoSeriesLine;

      IF NoSeries."Date Order" AND (SeriesDate < NoSeriesLine."Last Date Used") THEN BEGIN
        IF NoErrorsOrWarnings THEN
          EXIT('');
        ERROR(
          Text006,
          NoSeries.Code,NoSeriesLine."Last Date Used");
      END;
      NoSeriesLine."Last Date Used" := SeriesDate;
      IF NoSeriesLine."Last No. Used" = '' THEN BEGIN
        IF NoErrorsOrWarnings AND (NoSeriesLine."Starting No." = '') THEN
          EXIT('');
        NoSeriesLine.TESTFIELD("Starting No.");
        NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
      END ELSE
        IF NoSeriesLine."Increment-by No." <= 1 THEN
          NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
        ELSE
          IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.");
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
      THEN BEGIN
        IF NoErrorsOrWarnings THEN
          EXIT('');
        ERROR(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      END;
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Warning No." <> '') AND
         (NoSeriesLine."Last No. Used" >= NoSeriesLine."Warning No.") AND
         (NoSeriesCode <> WarningNoSeriesCode) AND
         (TryNoSeriesCode = '')
      THEN BEGIN
        IF NoErrorsOrWarnings THEN
          EXIT('');
        WarningNoSeriesCode := NoSeriesCode;
        MESSAGE(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      END;
      NoSeriesLine.VALIDATE(Open);

      IF ModifySeries THEN
        NoSeriesLine.MODIFY
      ELSE
        LastNoSeriesLine := NoSeriesLine;
      EXIT(NoSeriesLine."Last No. Used");
    END;

    PROCEDURE TestManual@21(DefaultNoSeriesCode@1000 : Code[10]);
    BEGIN
      IF DefaultNoSeriesCode <> '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NOT NoSeries."Manual Nos." THEN
          ERROR(
            Text000 +
            Text001,
            NoSeries.FIELDCAPTION("Manual Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
      END;
    END;

    PROCEDURE SetNoSeriesLineFilter@11(VAR NoSeriesLine@1000 : Record 309;NoSeriesCode@1001 : Code[10];StartDate@1002 : Date);
    BEGIN
      IF StartDate = 0D THEN
        StartDate := WORKDATE;
      NoSeriesLine.RESET;
      NoSeriesLine.SETCURRENTKEY("Series Code","Starting Date");
      NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
      NoSeriesLine.SETRANGE("Starting Date",0D,StartDate);
      IF NoSeriesLine.FINDLAST THEN BEGIN
        NoSeriesLine.SETRANGE("Starting Date",NoSeriesLine."Starting Date");
        NoSeriesLine.SETRANGE(Open,TRUE);
      END;
    END;

    LOCAL PROCEDURE IncrementNoText@20(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal);
    VAR
      DecimalNo@1002 : Decimal;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(DecimalNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      NewNo := FORMAT(DecimalNo + IncrementByNo,0,1);
      ReplaceNoText(No,NewNo,0,StartPos,EndPos);
    END;

    LOCAL PROCEDURE GetIntegerPos@4(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      IF No <> '' THEN BEGIN
        i := STRLEN(No);
        REPEAT
          IsDigit := No[i] IN ['0'..'9'];
          IF IsDigit THEN BEGIN
            IF EndPos = 0 THEN
              EndPos := i;
            StartPos := i;
          END;
          i := i - 1;
        UNTIL (i = 0) OR (StartPos <> 0) AND NOT IsDigit;
      END;
    END;

    LOCAL PROCEDURE ReplaceNoText@7(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer);
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
    BEGIN
      IF StartPos > 1 THEN
        StartNo := COPYSTR(No,1,StartPos - 1);
      IF EndPos < STRLEN(No) THEN
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      IF FixedLength > OldLength THEN
        OldLength := FixedLength;
      IF OldLength > NewLength THEN
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      IF STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo) > 20 THEN
        ERROR(
          Text010,
          No);
      No := StartNo + ZeroNo + NewNo + EndNo;
    END;

    BEGIN
    {
      //JX-VSC2.0-AUD
      //Import Facture achat Yooz

      // JX-YOOZ2 13/11/15 Ajout Gtext_Champ12 avec le type document

      // JX-YOOZ2 13/11/15 Ajout des change company pour import par le NAS
    }
    END.
  }
}

