OBJECT Codeunit 82 Sales-Post + Print
{
  OBJECT-PROPERTIES
  {
    Date=06/07/15;
    Time=16:00:00;
    Modified=Yes;
    Version List=NAVW18.00,JX-VSC2.0-XAD,JX-VSC2.0-AUD;
  }
  PROPERTIES
  {
    TableNo=36;
    Permissions=TableData 480=rimd,
                TableData 481=rimd;
    OnRun=BEGIN
            SalesHeader.COPY(Rec);
            Code;
            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;FRA=&Livrer,&Facturer,Livrer &et facturer';
      Text001@1001 : TextConst 'ENU=Do you want to post and print the %1?;FRA=Souhaitez-vous valider et imprimer le document %1 ?';
      PostAndEmailMsg@1016 : TextConst 'ENU=Do you want to post and email the %1?;FRA=Souhaitez-vous valider %1 et l''envoyer par e-mailÿ?';
      Text002@1002 : TextConst 'ENU=&Receive,&Invoice,Receive &and Invoice;FRA=&R‚ceptionner,&Facturer,R‚ceptionner &et facturer';
      SalesHeader@1003 : Record 36;
      SalesShptHeader@1004 : Record 110;
      SalesInvHeader@1005 : Record 112;
      SalesCrMemoHeader@1006 : Record 114;
      ReturnRcptHeader@1007 : Record 6660;
      ReportSelection@1008 : Record 77;
      Selection@1010 : Integer;
      SendReportAsEmail@1009 : Boolean;
      ServerSaveAsPdfFailedErr@1011 : TextConst 'ENU=The report is empty.;FRA=L''‚tat est vide.';

    PROCEDURE PostAndEmail@10(VAR ParmSalesHeader@1000 : Record 36);
    BEGIN
      SendReportAsEmail := TRUE;
      SalesHeader.COPY(ParmSalesHeader);
      Code;
      ParmSalesHeader := SalesHeader;
    END;

    LOCAL PROCEDURE Code@2();
    VAR
      SalesSetup@1001 : Record 311;
      SalesPostViaJobQueue@1000 : Codeunit 88;
      Lrec_SalesLine@1000000005 : Record 37;
      Lint_Compteur@1000000004 : Integer;
      Lrec_Dimension@1000000002 : Record 348;
      Lrec_DimensionValue@1000000001 : Record 349;
      Lcode_AxeReserve@1000000000 : Code[10];
      Lcu_Dimension@1000000007 : Codeunit 408;
      LCode_DimCode@1000000006 : ARRAY [50] OF Code[20];
      LCode_DimValueCode@1000000003 : ARRAY [50] OF Code[20];
    BEGIN
      WITH SalesHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              //Selection := STRMENU(Text000,3); //JX-AUD du 23/09/2014
              Selection := STRMENU(Text000,1); //JX-AUD du 23/09/2014
              IF Selection = 0 THEN
                EXIT;
              Ship := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END;
          "Document Type"::"Return Order":
            BEGIN
              Selection := STRMENU(Text002,3);
              IF Selection = 0 THEN
                EXIT;
              Receive := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END
          ELSE
            IF NOT CONFIRM(ConfirmationMessage,FALSE,"Document Type") THEN
              EXIT;
        END;

        "Print Posted Documents" := TRUE;

        //DEBUT MODIF JX XAD 16/03/2011 (traitement modification analytique manuelle post validation)
        Lcode_AxeReserve := 'RESERVE';
        IF Lrec_Dimension.GET(Lcode_AxeReserve) THEN
        BEGIN
          // On initialise, si n‚cessaire, les sections de l'axe analytique 'RESERVE'
          IF NOT Lrec_DimensionValue.GET(Lcode_AxeReserve,'100') THEN
          BEGIN
            FOR Lint_Compteur := 1 TO 100 DO
            BEGIN
              IF NOT Lrec_DimensionValue.GET(Lcode_AxeReserve,FORMAT(Lint_Compteur)) THEN
              BEGIN
                Lrec_DimensionValue.INIT;
                Lrec_DimensionValue.VALIDATE(Lrec_DimensionValue."Dimension Code",Lcode_AxeReserve);
                Lrec_DimensionValue.VALIDATE(Lrec_DimensionValue.Code,FORMAT(Lint_Compteur));
                Lrec_DimensionValue.INSERT;
              END;
            END;
          END;
          // Traitement de l'axe analytique 'RESERVE' pour chaque ligne du document
          IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo", "Document Type"::Order]) THEN
          BEGIN
            Lrec_SalesLine.RESET;
            Lrec_SalesLine.SETFILTER(Lrec_SalesLine."Document Type",'%1',"Document Type");
            Lrec_SalesLine.SETFILTER(Lrec_SalesLine."Document No.",'%1',"No.");
            Lrec_SalesLine.SETFILTER(Lrec_SalesLine.Type,'<>%1',Lrec_SalesLine.Type::" ");
            Lrec_SalesLine.SETFILTER(Lrec_SalesLine."No.",'<>%1','');
            Lint_Compteur := 0;
            IF Lrec_SalesLine.FIND('-') THEN
            REPEAT
              Lint_Compteur += 1;
              LCode_DimCode[1] := Lcode_AxeReserve;
              LCode_DimValueCode[1] := FORMAT(Lint_Compteur);
              Lrec_SalesLine."Dimension Set ID" := Lcu_Dimension.SetNewDimIDSpec(Lrec_SalesLine."Dimension Set ID",Lrec_SalesLine."Shortcut Dimension 1 Code",
                                            Lrec_SalesLine."Shortcut Dimension 2 Code",LCode_DimCode,LCode_DimValueCode);
              Lrec_SalesLine.MODIFY;
            UNTIL Lrec_SalesLine.NEXT = 0;
          END;
        END;
        //FIN MODIF JX XAD 16/03/2011 (traitement modification analytique manuelle post validation)

        SalesSetup.GET;
        IF SalesSetup."Post & Print with Job Queue" AND NOT SendReportAsEmail THEN
          SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
        ELSE BEGIN
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
          GetReport(SalesHeader);
        END;
        COMMIT;
      END;
    END;

    PROCEDURE GetReport@3(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              IF Ship THEN BEGIN
                SalesShptHeader."No." := "Last Shipping No.";
                SalesShptHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Shipment");
              END;
              IF Invoice THEN BEGIN
                SalesInvHeader."No." := "Last Posting No.";
                SalesInvHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Invoice");
              END;
            END;
          "Document Type"::Invoice:
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesInvHeader."No." := "No."
              ELSE
                SalesInvHeader."No." := "Last Posting No.";
              SalesInvHeader.SETRECFILTER;
              PrintReport(ReportSelection.Usage::"S.Invoice");
            END;
          "Document Type"::"Return Order":
            BEGIN
              IF Receive THEN BEGIN
                ReturnRcptHeader."No." := "Last Return Receipt No.";
                ReturnRcptHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Ret.Rcpt.");
              END;
              IF Invoice THEN BEGIN
                SalesCrMemoHeader."No." := "Last Posting No.";
                SalesCrMemoHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Cr.Memo");
              END;
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesCrMemoHeader."No." := "No."
              ELSE
                SalesCrMemoHeader."No." := "Last Posting No.";
              SalesCrMemoHeader.SETRECFILTER;
              PrintReport(ReportSelection.Usage::"S.Cr.Memo");
            END;
        END;
    END;

    LOCAL PROCEDURE PrintReport@1(ReportUsage@1000 : Integer);
    BEGIN
      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportUsage);
      ReportSelection.FINDSET;
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        IF SendReportAsEmail THEN
          DoSendReportAsEmail(ReportUsage,ReportSelection."Report ID")
        ELSE
          CASE ReportUsage OF
            ReportSelection.Usage::"SM.Invoice":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesInvHeader);
            ReportSelection.Usage::"SM.Credit Memo":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesCrMemoHeader);
            ReportSelection.Usage::"S.Invoice":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesInvHeader);
            ReportSelection.Usage::"S.Cr.Memo":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesCrMemoHeader);
            ReportSelection.Usage::"S.Shipment":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesShptHeader);
            ReportSelection.Usage::"S.Ret.Rcpt.":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,ReturnRcptHeader);
          END;
      UNTIL ReportSelection.NEXT = 0;
    END;

    LOCAL PROCEDURE DoSendReportAsEmail@6(ReportUsage@1000 : Integer;ReportId@1002 : Integer);
    VAR
      DocumentMailing@1006 : Codeunit 260;
      ServerAttachmentFilePath@1001 : Text[250];
    BEGIN
      ServerAttachmentFilePath := SaveReportAsPdf(ReportUsage,ReportId);
      DocumentMailing.EmailFileFromSalesHeader(SalesHeader,ServerAttachmentFilePath);
    END;

    LOCAL PROCEDURE SaveReportAsPdf@9(ReportUsage@1000 : Integer;ReportId@1005 : Integer) : Text[250];
    VAR
      FileManagement@1003 : Codeunit 419;
      ServerAttachmentFilePath@1004 : Text;
    BEGIN
      ServerAttachmentFilePath := FileManagement.ServerTempFileName('pdf');

      CASE ReportUsage OF
        ReportSelection.Usage::"SM.Invoice":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesInvHeader);
        ReportSelection.Usage::"SM.Credit Memo":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesCrMemoHeader);
        ReportSelection.Usage::"S.Invoice":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesInvHeader);
        ReportSelection.Usage::"S.Cr.Memo":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesCrMemoHeader);
        ReportSelection.Usage::"S.Shipment":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesShptHeader);
        ReportSelection.Usage::"S.Ret.Rcpt.":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,ReturnRcptHeader);
      END;
      IF NOT EXISTS(ServerAttachmentFilePath) THEN
        ERROR(ServerSaveAsPdfFailedErr);

      EXIT(ServerAttachmentFilePath);
    END;

    LOCAL PROCEDURE ConfirmationMessage@4() : Text;
    BEGIN
      IF SendReportAsEmail THEN
        EXIT(PostAndEmailMsg);
      EXIT(Text001);
    END;

    BEGIN
    {

      MODIF JX XAD 16/03/2011
      Traitement de l'axe analytique 'RESERVE' li‚ … la modification analytique manuelle post validation
      Initialisation de cet axe avec les sections

      //Modif JX-AUD 15/02/2013
      //Ajout "Document Type"::"Order" pour prendre en compte l'axe RESERVE lorsque que l'on facture par la commande

      //Modif JX-AUD du 23/09/2014
      //Mise en commentaire de l'option "Livrer & facturer"
    }
    END.
  }
}

