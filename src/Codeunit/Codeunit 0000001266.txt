OBJECT Codeunit 1266 Encryption Management
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExportEncryptionKeyFileDialogTxt@1000 : TextConst 'ENU=Choose the location where you want to save the encryption key.;FRA=S‚lectionnez l''emplacement d''enregistrement de la cl‚ de chiffrement.';
      ExportEncryptionKeyConfirmQst@1006 : TextConst 'ENU=The encryption key file must be protected by a password and stored in a safe location.\\Do you want to save the encryption key?;FRA=La cl‚ de chiffrement doit ˆtre prot‚g‚e par un mot de passe et enregistr‚e dans un emplacement s–r.\\Voulez-vous enregistrer la cl‚ de chiffrementÿ?';
      FileImportCaptionMsg@1008 : TextConst 'ENU=Select a key file to import.;FRA=Choisissez un fichier de cl‚ … importer.';
      DefaultEncryptionKeyFileNameTxt@1009 : TextConst 'ENU=EncryptionKey.key;FRA=EncryptionKey.key';
      EncryptionKeyFilExtnTxt@1010 : TextConst 'ENU=.key;FRA=.key';
      KeyFileFilterTxt@1012 : TextConst 'ENU=Key File(*.key)|*.key;FRA=Fichier de cl‚(*.key)|*.key';
      ReencryptConfirmQst@1013 : TextConst 'ENU=The encryption is already enabled. Continuing will decrypt the encrypted data and encrypt it again with the new key.\\Do you want to continue?;FRA=Le chiffrement est d‚j… activ‚. Si vous continuez, les donn‚es chiffr‚es seront d‚chiffr‚es puis rechiffr‚es … l''aide de la nouvelle cl‚.\\Voulez-vous continuerÿ?';
      EncryptionKeyImportedMsg@1014 : TextConst 'ENU=Key was imported successfully.;FRA=La cl‚ a bien ‚t‚ import‚e.';
      EnableEncryptionConfirmQst@1015 : TextConst 'ENU=Enabling encryption will generate an encryption key on the server.\It is recommended that you save a copy of the encryption key in a safe location.\\Do you want to continue?;FRA=L''activation du chiffrement va g‚n‚rer une cl‚ de chiffrement sur le serveur.\Nous vous recommandons d''enregistrer une copie de la cl‚ de chiffrement dans un emplacement s–r.\\Voulez-vous continuerÿ?';
      DisableEncryptionConfirmQst@1016 : TextConst 'ENU=Disabling encryption will decrypt the encrypted data and store it in the database in an unsecure way.\\Do you want to continue?;FRA=La d‚sactivation du chiffrement va entraŒner le d‚chiffrement des donn‚es chiffr‚es et les enregistrer dans la base de donn‚es de maniŠre non s‚curis‚e.\\Voulez-vous continuerÿ?';
      EncryptionCheckFailErr@1017 : TextConst 'ENU=Encryption is either not enabled or the encryption key cannot be found.;FRA=Le chiffrement n''est pas activ‚ ou la cl‚ de chiffrement est introuvable.';
      GlblSilentFileUploadDownload@1011 : Boolean;
      GlblTempClientFileName@1018 : Text;
      FileNameNotSetForSilentUploadErr@1019 : TextConst 'ENU=A file name was not specified for silent upload.;FRA=Le nom du fichier n''‚tait pas sp‚cifi‚ pour le t‚l‚chargement silencieux.';
      DeleteEncryptedDataConfirmQst@1002 : TextConst 'ENU=If you continue with this action all data that is encrypted will be deleted and lost.\Are you sure you want to delete all encrypted data?;FRA=Si vous continuez, toutes les donn‚es chiffr‚es seront supprim‚es et perdues.\Voulez-vous vraiment supprimer toutes les donn‚es chiffr‚esÿ?';

    PROCEDURE Encrypt@1(Text@1000 : Text) : Text;
    BEGIN
      CheckEncryptionEnabled;
      EXIT(ENCRYPT(Text));
    END;

    PROCEDURE Decrypt@5(Text@1000 : Text) : Text;
    BEGIN
      CheckEncryptionEnabled;
      EXIT(DECRYPT(Text))
    END;

    PROCEDURE ExportKey@4();
    VAR
      StdPasswordDialog@1000 : Page 9815;
      ServerFilename@1001 : Text;
    BEGIN
      CheckEncryptionEnabled;

      IF CONFIRM(ExportEncryptionKeyConfirmQst,TRUE) THEN BEGIN
        StdPasswordDialog.EnableBlankPassword(FALSE);
        IF StdPasswordDialog.RUNMODAL <> ACTION::OK THEN
          EXIT;
        ServerFilename := EXPORTENCRYPTIONKEY(StdPasswordDialog.GetPasswordValue);
        DownloadFile(ServerFilename);
      END;
    END;

    PROCEDURE ImportKey@3();
    VAR
      FileManagement@1003 : Codeunit 419;
      StdPasswordDialog@1002 : Page 9815;
      TempKeyFilePath@1000 : Text;
    BEGIN
      TempKeyFilePath := UploadFile;

      // TempKeyFilePath is '' if the used cancelled the Upload file dialog.
      IF TempKeyFilePath = '' THEN
        EXIT;

      StdPasswordDialog.EnableGetPasswordMode(FALSE);
      IF StdPasswordDialog.RUNMODAL = ACTION::OK THEN BEGIN
        IF IsEncryptionEnabled THEN BEGIN
          IF NOT CONFIRM(ReencryptConfirmQst,TRUE) THEN
            EXIT;
          DisableEncryption(TRUE);
        END;

        IMPORTENCRYPTIONKEY(TempKeyFilePath,StdPasswordDialog.GetPasswordValue);
        EncryptData;
        MESSAGE(EncryptionKeyImportedMsg);
        FileManagement.DeleteServerFile(TempKeyFilePath);
      END;
    END;

    PROCEDURE EnableEncryption@2();
    BEGIN
      IF CONFIRM(EnableEncryptionConfirmQst,TRUE) THEN BEGIN
        CREATEENCRYPTIONKEY;
        ExportKey;
        EncryptData;
      END;
    END;

    PROCEDURE DisableEncryption@7(Silent@1000 : Boolean);
    BEGIN
      // Silent is FALSE when we want the user to take action on if the encryption should be disabled or not. In cases like import key
      // Silent should be TRUE as disabling encryption is a must before importing a new key, else data will be lost.
      IF NOT Silent THEN
        IF NOT CONFIRM(DisableEncryptionConfirmQst,TRUE) THEN
          EXIT;

      DecryptData;
      DELETEENCRYPTIONKEY;
    END;

    PROCEDURE DeleteEncryptedData@14();
    BEGIN
      IF CONFIRM(DeleteEncryptedDataConfirmQst) THEN BEGIN
        DeleteServicePasswordData;
        DELETEENCRYPTIONKEY;
      END;
    END;

    PROCEDURE IsEncryptionEnabled@27() : Boolean;
    BEGIN
      // ENCRYPTIONKEYEXISTS checks both if the encryption is enabled and if the key exists
      EXIT(ENCRYPTIONKEYEXISTS);
    END;

    LOCAL PROCEDURE CheckEncryptionEnabled@6();
    BEGIN
      IF NOT IsEncryptionEnabled THEN
        ERROR(EncryptionCheckFailErr);
    END;

    LOCAL PROCEDURE EncryptData@11();
    BEGIN
      EncryptServicePasswordData;
    END;

    LOCAL PROCEDURE DecryptData@12();
    BEGIN
      DecryptServicePasswordData;
    END;

    LOCAL PROCEDURE EncryptServicePasswordData@8();
    VAR
      ServicePassword@1000 : Record 1261;
      InStream@1004 : InStream;
      UnencryptedText@1006 : Text;
    BEGIN
      IF ServicePassword.FINDSET THEN
        REPEAT
          ServicePassword.CALCFIELDS(Value);
          ServicePassword.Value.CREATEINSTREAM(InStream);
          InStream.READTEXT(UnencryptedText);

          CLEAR(ServicePassword.Value);
          ServicePassword.SavePassword(UnencryptedText);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE DecryptServicePasswordData@9();
    VAR
      ServicePassword@1000 : Record 1261;
      OutStream@1005 : OutStream;
      EncryptedText@1006 : Text;
    BEGIN
      IF ServicePassword.FINDSET THEN
        REPEAT
          EncryptedText := ServicePassword.GetPassword;

          CLEAR(ServicePassword.Value);
          ServicePassword.Value.CREATEOUTSTREAM(OutStream);
          OutStream.WRITETEXT(EncryptedText);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteServicePasswordData@16();
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      IF ServicePassword.FINDSET THEN
        REPEAT
          CLEAR(ServicePassword.Value);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE UploadFile@17() : Text;
    VAR
      FileManagement@1000 : Codeunit 419;
    BEGIN
      IF GlblSilentFileUploadDownload THEN BEGIN
        IF GlblTempClientFileName = '' THEN
          ERROR(FileNameNotSetForSilentUploadErr);
        EXIT(FileManagement.UploadFileSilent(GlblTempClientFileName));
      END;

      EXIT(FileManagement.UploadFileWithFilter(FileImportCaptionMsg,
          DefaultEncryptionKeyFileNameTxt,KeyFileFilterTxt,EncryptionKeyFilExtnTxt));
    END;

    LOCAL PROCEDURE DownloadFile@18(ServerFileName@1001 : Text);
    VAR
      FileManagement@1000 : Codeunit 419;
    BEGIN
      IF GlblSilentFileUploadDownload THEN
        GlblTempClientFileName := FileManagement.DownloadTempFile(ServerFileName)
      ELSE
        FileManagement.DownloadHandler(ServerFileName,ExportEncryptionKeyFileDialogTxt,
          '',KeyFileFilterTxt,DefaultEncryptionKeyFileNameTxt);
    END;

    PROCEDURE SetSilentFileUploadDownload@10(IsSilent@1000 : Boolean;SilentFileUploadName@1001 : Text);
    BEGIN
      GlblSilentFileUploadDownload := IsSilent;
      GlblTempClientFileName := SilentFileUploadName;
    END;

    PROCEDURE GetGlblTempClientFileName@13() : Text;
    BEGIN
      EXIT(GlblTempClientFileName);
    END;

    BEGIN
    END.
  }
}

