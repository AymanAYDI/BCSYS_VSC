OBJECT Codeunit 1210 Payment Export Mgt
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    Permissions=TableData 81=rm,
                TableData 1220=rimd,
                TableData 1221=rimd,
                TableData 1226=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServerFileExtension@1005 : Text[3];
      ServerFileName@1004 : Text;
      SilentServerMode@1003 : Boolean;
      IncorrectLengthOfValuesErr@1000 : TextConst '@@@="%1=Post Exch.Def Type;%2=Post Exch. Def Code;%3=Field;%4=Expected length;%5=Actual length;%6=Actual Value";ENU=The payment that you are trying to export is different from the specified %1, %2.\\The value in the %3 field does not have the length that is required by the export format. \Expected: %4 \Actual: %5 \Field Value: %6.;FRA=Le paiement que vous tentez d''exporter est diff‚rent du %1 sp‚cifi‚, %2.\\La valeur du champ %3 ne pr‚sente pas la longueur requise par le format d''exportation. \Attenduÿ: %4 \R‚elÿ: %5 \Valeur du champÿ: %6.';
      FormatNotDefinedErr@1006 : TextConst '@@@="%1 = Post. Exch. Def. Code";ENU=You must choose a valid export format for the bank account. Format %1 is not correctly defined.;FRA=Vous devez choisir un format d''exportation valide pour le compte bancaire. Le format %1 n''est pas d‚fini correctement.';
      PostExchLineDefNotFoundErr@1007 : TextConst '@@@="%1=Post. Exch. Def. Name;%2=Post. Exch. Line Def. Code";ENU=The %1 export format does not support the Payment Type %2.;FRA=Le format d''exportation %1 ne prend pas en charge le mode de paiement %2.';

    PROCEDURE CreatePostingExch@4(VAR PostingExch@1000 : Record 1220;BankAccountCode@1001 : Code[20]);
    VAR
      BankAccount@1002 : Record 270;
      BankExportImportSetup@1003 : Record 1200;
    BEGIN
      BankAccount.GET(BankAccountCode);
      BankAccount.TESTFIELD("Payment Export Format");
      BankExportImportSetup.GET(BankAccount."Payment Export Format");
      BankExportImportSetup.TESTFIELD("Posting Exch. Def. Code");
      WITH PostingExch DO BEGIN
        INIT;
        "Posting Exch. Def Code" := BankExportImportSetup."Posting Exch. Def. Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CreatePaymentLines@10(VAR PaymentExportData@1000 : Record 1226);
    VAR
      BankAccount@1007 : Record 270;
      PostingExch@1006 : Record 1220;
      PaymentExportDataRecRef@1001 : RecordRef;
    BEGIN
      BankAccount.GET(PaymentExportData."Sender Bank Account Code");
      PaymentExportData."Sender Bank Account No." :=
        COPYSTR(BankAccount.GetBankAccountNo,1,MAXSTRLEN(PaymentExportData."Sender Bank Account No."));
      PaymentExportData.MODIFY;

      PostingExch.GET(PaymentExportData."Posting Exch Entry No.");
      PaymentExportDataRecRef.GETTABLE(PaymentExportData);
      ProcessColumnMapping(PostingExch,PaymentExportDataRecRef,
        PaymentExportData."Line No.",PaymentExportData."Posting Exch. Line Def Code");
    END;

    PROCEDURE ProcessColumnMapping@11(PostingExch@1004 : Record 1220;RecRef@1016 : RecordRef;LineNo@1017 : Integer;PostingExchLineDefCode@1003 : Code[20]);
    VAR
      PostingExchDef@1023 : Record 1222;
      PostingExchColumnDef@1001 : Record 1223;
      PostingExchField@1009 : Record 1221;
      PostingExchFieldMapping@1010 : Record 1225;
      ValueAsDestType@1007 : Variant;
      FieldRef@1002 : FieldRef;
      ValueAsString@1000 : Text[250];
    BEGIN
      IF NOT PostingExchDef.GET(PostingExch."Posting Exch. Def Code") THEN
        ERROR(FormatNotDefinedErr,PostingExch."Posting Exch. Def Code");

      PrepopulateColumns(PostingExchDef,PostingExchLineDefCode,PostingExch."Entry No.",LineNo);

      PostingExchFieldMapping.SETRANGE("Posting Exch. Def Code",PostingExchDef.Code);
      PostingExchFieldMapping.SETRANGE("Posting Exch. Line Def Code",PostingExchLineDefCode);
      PostingExchFieldMapping.SETRANGE("Table ID",DATABASE::"Payment Export Data");
      PostingExchFieldMapping.FINDSET;

      REPEAT
        PostingExchColumnDef.GET(PostingExchDef.Code,PostingExchLineDefCode,PostingExchFieldMapping."Column No.");

        IF PostingExchFieldMapping."Use Default Value" THEN
          ValueAsString := PostingExchFieldMapping."Default Value"
        ELSE BEGIN
          FieldRef := RecRef.FIELD(PostingExchFieldMapping."Field ID");
          CheckOptional(PostingExchFieldMapping.Optional,FieldRef);
          CastToDestinationType(ValueAsDestType,FieldRef.VALUE,PostingExchColumnDef,PostingExchFieldMapping.Multiplier);
          ValueAsString := FormatToText(ValueAsDestType,PostingExchDef,PostingExchColumnDef);
        END;

        CheckLength(ValueAsString,RecRef.FIELD(PostingExchFieldMapping."Field ID"),PostingExchDef,PostingExchColumnDef);

        PostingExchField.GET(PostingExch."Entry No.",LineNo,PostingExchFieldMapping."Column No.");
        PostingExchField.Value := ValueAsString;
        PostingExchField.MODIFY;
      UNTIL PostingExchFieldMapping.NEXT = 0;
    END;

    LOCAL PROCEDURE PrepopulateColumns@39(PostingExchDef@1000 : Record 1222;PostingExchLineDefCode@1001 : Code[20];PostingExchEntryNo@1004 : Integer;PostingExchLineNo@1005 : Integer);
    VAR
      PostingExchField@1002 : Record 1221;
      PostingExchLineDef@1007 : Record 1227;
      PostingExchColumnDef@1003 : Record 1223;
      ColumnIndex@1006 : Integer;
    BEGIN
      IF PostingExchDef."File Type" IN [PostingExchDef."File Type"::"Fixed Text",PostingExchDef."File Type"::Xml] THEN BEGIN
        PostingExchColumnDef.SETRANGE("Posting Exch. Def Code",PostingExchDef.Code);
        PostingExchColumnDef.SETRANGE("Posting Exch. Line Def Code",PostingExchLineDefCode);
        IF NOT PostingExchColumnDef.FINDSET THEN
          ERROR(PostExchLineDefNotFoundErr,PostingExchDef.Name,PostingExchLineDefCode);
        REPEAT
          PostingExchField.InsertRec(
            PostingExchEntryNo,PostingExchLineNo,PostingExchColumnDef."Column No.",
            PADSTR(PostingExchColumnDef.Constant,PostingExchColumnDef.Length),PostingExchLineDefCode)
        UNTIL PostingExchColumnDef.NEXT = 0;
      END ELSE BEGIN
        IF NOT PostingExchLineDef.GET(PostingExchDef.Code,PostingExchLineDefCode) THEN
          ERROR(PostExchLineDefNotFoundErr,PostingExchDef.Name,PostingExchLineDefCode);
        FOR ColumnIndex := 1 TO PostingExchLineDef."Column Count" DO
          IF PostingExchColumnDef.GET(PostingExchDef.Code,PostingExchLineDef.Code,ColumnIndex) THEN
            PostingExchField.InsertRec(
              PostingExchEntryNo,PostingExchLineNo,ColumnIndex,PostingExchColumnDef.Constant,PostingExchLineDefCode)
          ELSE
            PostingExchField.InsertRec(PostingExchEntryNo,PostingExchLineNo,ColumnIndex,'',PostingExchLineDefCode);
      END;
    END;

    LOCAL PROCEDURE CheckOptional@21(Optional@1000 : Boolean;FieldRef@1001 : FieldRef);
    VAR
      Value@1002 : Variant;
      StringValue@1003 : Text;
    BEGIN
      IF Optional THEN
        EXIT;

      Value := FieldRef.VALUE;
      StringValue := FORMAT(Value);

      IF ((Value.ISDECIMAL OR Value.ISINTEGER OR Value.ISBIGINTEGER) AND (StringValue = '0')) OR
         (StringValue = '')
      THEN
        FieldRef.TESTFIELD
    END;

    LOCAL PROCEDURE CastToDestinationType@44(VAR DestinationValue@1004 : Variant;SourceValue@1005 : Variant;PostingExchColumnDef@1003 : Record 1223;Multiplier@1001 : Decimal);
    VAR
      ValueAsDecimal@1002 : Decimal;
      ValueAsDate@1000 : Date;
      ValueAsDateTime@1006 : DateTime;
    BEGIN
      WITH PostingExchColumnDef DO
        CASE "Data Type" OF
          "Data Type"::Decimal:
            BEGIN
              IF FORMAT(SourceValue) = '' THEN
                ValueAsDecimal := 0
              ELSE
                EVALUATE(ValueAsDecimal,FORMAT(SourceValue));
              DestinationValue := Multiplier * ValueAsDecimal;
            END;
          "Data Type"::Text:
            DestinationValue := FORMAT(SourceValue);
          "Data Type"::Date:
            BEGIN
              EVALUATE(ValueAsDate,FORMAT(SourceValue));
              DestinationValue := ValueAsDate;
            END;
          "Data Type"::DateTime:
            BEGIN
              EVALUATE(ValueAsDateTime,FORMAT(SourceValue,0,9),9);
              DestinationValue := ValueAsDateTime;
            END;
        END;
    END;

    LOCAL PROCEDURE FormatToText@46(ValueToFormat@1003 : Variant;PostingExchDef@1001 : Record 1222;PostingExchColumnDef@1000 : Record 1223) : Text[250];
    BEGIN
      IF PostingExchColumnDef."Data Format" <> '' THEN
        EXIT(FORMAT(ValueToFormat,0,PostingExchColumnDef."Data Format"));

      IF PostingExchDef."File Type" = PostingExchDef."File Type"::Xml THEN
        EXIT(FORMAT(ValueToFormat,0,9));

      IF (PostingExchDef."File Type" = PostingExchDef."File Type"::"Fixed Text") AND
         (PostingExchColumnDef."Data Type" = PostingExchColumnDef."Data Type"::Text)
      THEN
        EXIT(FORMAT(ValueToFormat,0,STRSUBSTNO('<Text,%1>',PostingExchColumnDef.Length)));

      EXIT(FORMAT(ValueToFormat));
    END;

    LOCAL PROCEDURE CheckLength@49(Value@1001 : Text;FieldRef@1002 : FieldRef;PostingExchDef@1003 : Record 1222;PostingExchColumnDef@1000 : Record 1223);
    VAR
      PostingExchDefCode@1004 : Code[20];
    BEGIN
      PostingExchDefCode := PostingExchColumnDef."Posting Exch. Def Code";

      IF (PostingExchColumnDef.Length > 0) AND (STRLEN(Value) > PostingExchColumnDef.Length) THEN
        ERROR(IncorrectLengthOfValuesErr,GetType(PostingExchDefCode),PostingExchDefCode,
          FieldRef.CAPTION,PostingExchColumnDef.Length,STRLEN(Value),Value);

      IF (PostingExchDef."File Type" = PostingExchDef."File Type"::"Fixed Text") AND
         (STRLEN(Value) <> PostingExchColumnDef.Length)
      THEN
        ERROR(IncorrectLengthOfValuesErr,GetType(PostingExchDefCode),PostingExchDefCode,FieldRef.CAPTION,
          PostingExchColumnDef.Length,STRLEN(Value),Value);
    END;

    LOCAL PROCEDURE GetType@6(PostExchDefCode@1000 : Code[20]) : Text;
    VAR
      PostingExchDef@1001 : Record 1222;
    BEGIN
      PostingExchDef.GET(PostExchDefCode);
      EXIT(FORMAT(PostingExchDef.Type));
    END;

    PROCEDURE ExportToFile@5(EntryNo@1000 : Integer);
    VAR
      PostingExch@1003 : Record 1220;
      PostingExchDef@1001 : Record 1222;
      PostingExchField@1002 : Record 1221;
    BEGIN
      PostingExch.GET(EntryNo);
      PostingExchDef.GET(PostingExch."Posting Exch. Def Code");
      PostingExchField.SETRANGE("Posting Exch. No.",PostingExch."Entry No.");
      PostingExchDef.TESTFIELD("Reading/Writing XMLport");
      IF NOT SilentServerMode THEN
        XMLPORT.RUN(PostingExchDef."Reading/Writing XMLport",FALSE,FALSE,PostingExchField)
      ELSE
        ExportToServerTempFile(PostingExchDef."Reading/Writing XMLport",PostingExchField);

      PostingExchField.DELETEALL;
      PostingExch.DELETE
    END;

    PROCEDURE EnableExportToServerTempFile@27(NewMode@1000 : Boolean;NewExtension@1001 : Text[3]);
    BEGIN
      SilentServerMode := NewMode;
      ServerFileExtension := NewExtension;
    END;

    LOCAL PROCEDURE ExportToServerTempFile@25(XMLPortID@1006 : Integer;VAR PostingExchField@1000 : Record 1221);
    VAR
      FileManagement@1005 : Codeunit 419;
      ExportFile@1003 : File;
      OutStream@1004 : OutStream;
    BEGIN
      ServerFileName := FileManagement.ServerTempFileName(ServerFileExtension);

      ExportFile.WRITEMODE := TRUE;
      ExportFile.TEXTMODE := TRUE;
      ExportFile.CREATE(ServerFileName);
      ExportFile.CREATEOUTSTREAM(OutStream);
      XMLPORT.EXPORT(XMLPortID,OutStream,PostingExchField);
      ExportFile.CLOSE;
    END;

    PROCEDURE GetServerTempFileName@29() : Text[1024];
    BEGIN
      EXIT(ServerFileName);
    END;

    BEGIN
    END.
  }
}

