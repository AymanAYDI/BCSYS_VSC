OBJECT Codeunit 9651 Document Report Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=31/10/14;
    Time=12:00:00;
    Version List=NAVW18.00.00.38457;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotImplementedErr@1002 : TextConst 'ENU=This option is not available.;FRA=Cette option n''est pas disponible.';
      TemplateValidationQst@1000 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?;FRA=La pr‚sentation Word n''est pas compatible avec la conception actuelle de l''‚tat (par exemple, champs absents ou ID ‚tat incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation de la pr‚sentationÿ:\%1\Voulez-vous continuerÿ?';
      TemplateValidationErr@1003 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.;FRA=La pr‚sentation Word n''est pas compatible avec la conception actuelle de l''‚tat (par exemple, champs absents ou ID ‚tat incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation du documentÿ:\%1\Vous devez mettre … jour la pr‚sentation pour qu''elle corresponde … la conception actuelle de l''‚tat.';
      AbortWithValidationErr@1001 : TextConst 'ENU=The Word layout action has been canceled because of validation errors.;FRA=L''action pr‚sentation Word a ‚t‚ annul‚e en raison d''erreurs de validation.';
      TemplateValidationUpdateQst@1004 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to run an automatic update?;FRA=La pr‚sentation Word n''est pas compatible avec la conception actuelle de l''‚tat (par exemple, champs absents ou ID ‚tat incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation de la pr‚sentationÿ:\%1\Voulez-vous ex‚cuter une mise … jour automatiqueÿ?';
      TemplateAfterUpdateValidationErr@1006 : TextConst 'ENU=The automatic update could not resolve all the conflicts in the current Word layout. For example, the layout uses fields that are missing in the report design or the report ID is wrong.\The following errors were detected:\%1\You must manually update the layout to match the current report design.;FRA=La mise … jour automatique n''a pas pu r‚soudre tous les conflits dans la pr‚sentation Word actuelle. Par exemple, la pr‚sentation utilise des champs qui n''apparaissent pas dans la conception de l''‚tat ou l''ID de l''‚tat est incorrect.\Les erreurs suivantes ont ‚t‚ d‚tect‚esÿ:\%1\Vous devez mettre … jour manuellement la pr‚sentation pour qu''elle corresponde … la conception actuelle de l''‚tat.';

    PROCEDURE MergeWordLayout@5(ReportID@1000 : Integer;ReportAction@1007 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print';InStrXmlData@1002 : InStream;FileName@1001 : Text);
    VAR
      ReportLayoutSelection@1011 : Record 9651;
      CustomReportLayout@1003 : Record 9650;
      TempBlob@1009 : Record 99008535;
      FileMgt@1008 : Codeunit 419;
      InStrWordDoc@1006 : InStream;
      OutStrWordDoc@1005 : OutStream;
      NAVWordXMLMerger@1004 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      DoConvertToPdf@1010 : Boolean;
      CustomLayoutID@1012 : Integer;
    BEGIN
      // FileName contains printername for ReportAction::Print.
      // Temporarily selected layout for Design-time report execution?
      IF ReportLayoutSelection.GetTempLayoutSelected <> 0 THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE  // Normal selection
        IF ReportLayoutSelection.GET(ReportID,COMPANYNAME) AND
           (ReportLayoutSelection.Type = ReportLayoutSelection.Type::"Custom Layout")
        THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF CustomLayoutID <> 0 THEN
        IF NOT CustomReportLayout.GET(CustomLayoutID) THEN
          CustomLayoutID := 0;

      IF CustomLayoutID = 0 THEN
        REPORT.WORDLAYOUT(ReportID,InStrWordDoc)
      ELSE BEGIN
        ValidateAndUpdateWordLayoutOnRecord(CustomReportLayout);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStrWordDoc);
        ValidateWordLayoutCheckOnly(ReportID,InStrWordDoc);
      END;
      TempBlob.Blob.CREATEOUTSTREAM(OutStrWordDoc);

      OutStrWordDoc := NAVWordXMLMerger.MergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) ;
      COMMIT;

      IF ReportAction = ReportAction::SaveAsPdf THEN BEGIN
        DoConvertToPdf := TRUE;
        ConvertToPdf(TempBlob);
      END;

      CASE ReportAction OF
        ReportAction::SaveAsPdf,ReportAction::SaveAsWord:
          IF FileName = '' THEN
            FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,DoConvertToPdf),TRUE)
          ELSE
            TempBlob.Blob.EXPORT(FileName);
        ReportAction::SaveAsExcel:
          ERROR(NotImplementedErr);
        ReportAction::Print:
          PrintWordDoc(ReportID,TempBlob,FileName);
        ReportAction::Preview:
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,DoConvertToPdf),TRUE);
      END;
    END;

    PROCEDURE ValidateWordLayout@2(ReportID@1001 : Integer;DocumentStream@1000 : InStream;useConfirm@1004 : Boolean;updateContext@1005 : Boolean) : Boolean;
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF useConfirm THEN BEGIN
          IF NOT CONFIRM(TemplateValidationQst,FALSE,ValidationErrors) THEN
            ERROR(AbortWithValidationErr);
        END ELSE BEGIN
          IF updateContext THEN
            ValidationErrorFormat := TemplateAfterUpdateValidationErr
          ELSE
            ValidationErrorFormat := TemplateValidationErr;

          ERROR(ValidationErrorFormat,ValidationErrors);
        END;

        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ValidateWordLayoutCheckOnly@4(ReportID@1001 : Integer;DocumentStream@1000 : InStream);
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        ValidationErrorFormat := TemplateAfterUpdateValidationErr;
        MESSAGE(ValidationErrorFormat,ValidationErrors);
      END;
    END;

    PROCEDURE ValidateAndUpdateWordLayoutOnRecord@7(CustomReportLayout@1001 : Record 9650) : Boolean;
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      DocumentStream@1005 : InStream;
      ValidationErrors@1003 : Text;
    BEGIN
      CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::Word);
      CustomReportLayout.CALCFIELDS(Layout);
      CustomReportLayout.Layout.CREATEINSTREAM(DocumentStream);
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;

      ValidationErrors :=
        NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(CustomReportLayout."Report ID",TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF CONFIRM(TemplateValidationUpdateQst,FALSE,ValidationErrors) THEN BEGIN
          ValidationErrors := CustomReportLayout.TryUpdateLayout;
          COMMIT;
          EXIT(TRUE);
        END;
        ERROR(TemplateValidationErr,ValidationErrors);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE UpdateWordLayout@3(DocumentStream@1001 : InStream;VAR UpdateStream@1002 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text;ContinueOnError@1000 : Boolean) : Boolean;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;
      EXIT(NAVWordXMLMerger.UpdateWordDocumentLayout(DocumentStream,UpdateStream,CachedCustomPart,CurrentCustomPart,ContinueOnError));
    END;

    PROCEDURE TryUpdateWordLayout@12(DocumentStream@1001 : InStream;VAR UpdateStream@1002 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;
      NAVWordXMLMerger.UpdateWordDocumentLayout(DocumentStream,UpdateStream,CachedCustomPart,CurrentCustomPart,TRUE);
      EXIT(NAVWordXMLMerger.LastUpdateError);
    END;

    PROCEDURE UpdateRdlcLayout@8(reportId@1001 : Integer;Rdlc@1002 : Text;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.RdlcReportManager";
    BEGIN
      EXIT(NAVWordXMLMerger.UpdateRdlcLayout(reportId,Rdlc,CachedCustomPart,CurrentCustomPart));
    END;

    PROCEDURE TryUpdateRdlcLayout@13(reportId@1001 : Integer;RdlcStream@1002 : InStream;RdlcUpdatedStream@1000 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.RdlcReportManager";
    BEGIN
      EXIT(NAVWordXMLMerger.TryUpdateRdlcLayout(reportId,RdlcStream,RdlcUpdatedStream,CachedCustomPart,CurrentCustomPart));
    END;

    PROCEDURE NewWordLayout@11(ReportId@1000 : Integer;VAR DocumentStream@1001 : OutStream);
    VAR
      NAVWordXmlMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXmlMerger.NewWordDocumentLayout(DocumentStream,REPORT.WORDXMLPART(ReportId));
    END;

    LOCAL PROCEDURE ConvertToPdf@1(VAR TempBlob@1015 : Record 99008535);
    VAR
      TempBlobPdf@1006 : Record 99008535;
      InStreamWordDoc@1007 : InStream;
      OutStreamPdfDoc@1008 : OutStream;
      PdfWriter@1002 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
      TempBlobPdf.Blob.CREATEOUTSTREAM(OutStreamPdfDoc);
      PdfWriter.ConvertToPdf(InStreamWordDoc,OutStreamPdfDoc);
      TempBlob.Blob := TempBlobPdf.Blob;
    END;

    LOCAL PROCEDURE PrintWordDoc@15(ReportID@1003 : Integer;VAR TempBlob@1015 : Record 99008535;PrinterName@1000 : Text);
    VAR
      FileMgt@1001 : Codeunit 419;
      InStreamWordDoc@1007 : InStream;
      PdfWriter@1002 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
    BEGIN
      IF FileMgt.IsWindowsClient THEN
        PrintWordDocInWord(TempBlob)
      ELSE
        IF FileMgt.IsWebClient THEN
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,FALSE),TRUE)
        ELSE BEGIN
          // Server side printing
          TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
          PdfWriter.PrintWordDoc(InStreamWordDoc,PrinterName)
        END;
    END;

    LOCAL PROCEDURE PrintWordDocInWord@17(TempBlob@1015 : Record 99008535);
    VAR
      FileMgt@1005 : Codeunit 419;
      WordApplication@1001 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordHelper@1016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      FileName@1003 : Text;
      T0@1002 : DateTime;
    BEGIN
      FileName := STRSUBSTNO('%1.docx',CREATEGUID);

      FileName := FileMgt.BLOBExport(TempBlob,FileName,FALSE);

      WordApplication := WordApplication.ApplicationClass;
      WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
      WordHelper.CallPrintOut(WordDocument);

      T0 := CURRENTDATETIME;
      IF NOT ISNULL(WordApplication) THEN BEGIN
        WHILE (WordApplication.BackgroundPrintingStatus > 0) AND (CURRENTDATETIME < T0 + 120000) DO
          SLEEP(250);
        WordHelper.CallQuit(WordApplication,FALSE);
      END;
      FileMgt.DeleteClientFile(FileName);
    END;

    LOCAL PROCEDURE UserFileName@6(ReportID@1000 : Integer;DoConvertToPdf@1003 : Boolean) : Text;
    VAR
      Object@1001 : Record 2000000001;
      UserFileType@1002 : Text[10];
    BEGIN
      Object.GET(Object.Type::Report,'',ReportID);
      Object.CALCFIELDS(Caption);
      UserFileType := '%1.docx';
      IF DoConvertToPdf THEN
        UserFileType := '%1.pdf';
      EXIT(STRSUBSTNO(UserFileType,Object.Caption));
    END;

    BEGIN
    END.
  }
}

