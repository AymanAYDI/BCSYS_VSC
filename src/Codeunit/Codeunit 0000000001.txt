OBJECT Codeunit 1 ApplicationManagement
{
  OBJECT-PROPERTIES
  {
    Date=12/01/16;
    Time=17:30:00;
    Modified=Yes;
    Version List=NAVW18.00.00.39663,JX-YOOZ2AUTO;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DebuggerManagement@1017 : Codeunit 9500;
      LogInManagement@1027 : Codeunit 40;
      TextManagement@1003 : Codeunit 41;
      CaptionManagement@1000 : Codeunit 42;
      LanguageManagement@1002 : Codeunit 43;
      NASManagement@1001 : Codeunit 44;
      AutoFormatManagement@1012 : Codeunit 45;
      NotSupportedErr@1004 : TextConst 'ENU=The value is not supported.;FRA=La valeur n''est pas prise en charge.';

    PROCEDURE CompanyOpen@30();
    BEGIN
      LogInManagement.CompanyOpen;
      FctYoozImportFile; //JX-YOOZ2-PBE
    END;

    PROCEDURE GetSystemIndicator@51(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    VAR
      CompanyInformation@1002 : Record 79;
    BEGIN
      IF CompanyInformation.GET THEN
        CompanyInformation.GetSystemIndicator(Text,Style);
    END;

    PROCEDURE CompanyClose@31();
    BEGIN
      LogInManagement.CompanyClose;
    END;

    PROCEDURE FindPrinter@11(ReportID@1000 : Integer) : Text[250];
    VAR
      PrinterSelection@1001 : Record 78;
    BEGIN
      CLEAR(PrinterSelection);

      IF NOT PrinterSelection.GET(USERID,ReportID) THEN
        IF NOT PrinterSelection.GET('',ReportID) THEN
          IF NOT PrinterSelection.GET(USERID,0) THEN
            IF PrinterSelection.GET('',0) THEN;

      EXIT(PrinterSelection."Printer Name");
    END;

    PROCEDURE ApplicationVersion@2() : Text[80];
    BEGIN
      EXIT('FR Dynamics NAV 8.0');
    END;

    PROCEDURE ApplicationBuild@3() : Text[80];
    BEGIN
      EXIT('39663');
    END;

    PROCEDURE ApplicationLanguage@4() : Integer;
    BEGIN
      EXIT(1033);
    END;

    PROCEDURE DefaultRoleCenter@50() : Integer;
    VAR
      ConfPersMgt@1000 : Codeunit 9170;
    BEGIN
      EXIT(ConfPersMgt.DefaultRoleCenterID);
    END;

    PROCEDURE MakeDateTimeText@114(VAR DateTimeText@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeDateTimeText(DateTimeText));
    END;

    PROCEDURE GetSeparateDateTime@10011(DateTimeText@1000 : Text[250];VAR Date@1005 : Date;VAR Time@1006 : Time) : Boolean;
    BEGIN
      EXIT(TextManagement.GetSeparateDateTime(DateTimeText,Date,Time));
    END;

    PROCEDURE MakeDateText@105(VAR DateText@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeDateText(DateText));
    END;

    PROCEDURE MakeTimeText@106(VAR TimeText@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeTimeText(TimeText));
    END;

    PROCEDURE MakeText@107(VAR Text@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeText(Text));
    END;

    PROCEDURE MakeDateTimeFilter@214(VAR DateTimeFilterText@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeDateTimeFilter(DateTimeFilterText));
    END;

    PROCEDURE MakeDateFilter@205(VAR DateFilterText@1000 : Text[1024]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeDateFilter(DateFilterText));
    END;

    PROCEDURE MakeTextFilter@207(VAR TextFilterText@1000 : Text) : Integer;
    BEGIN
      EXIT(TextManagement.MakeTextFilter(TextFilterText));
    END;

    PROCEDURE MakeCodeFilter@209(VAR TextFilterText@1000 : Text) : Integer;
    BEGIN
      EXIT(TextManagement.MakeTextFilter(TextFilterText));
    END;

    PROCEDURE MakeTimeFilter@206(VAR TimeFilterText@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeTimeFilter(TimeFilterText));
    END;

    PROCEDURE AutoFormatTranslate@12(AutoFormatType@1000 : Integer;AutoFormatExpr@1001 : Text[80]) : Text[80];
    BEGIN
      EXIT(AutoFormatManagement.AutoFormatTranslate(AutoFormatType,AutoFormatExpr));
    END;

    PROCEDURE ReadRounding@14() : Decimal;
    BEGIN
      EXIT(AutoFormatManagement.ReadRounding);
    END;

    PROCEDURE CaptionClassTranslate@15(Language@1000 : Integer;CaptionExpr@1001 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(CaptionManagement.CaptionClassTranslate(Language,CaptionExpr));
    END;

    PROCEDURE GetCueStyle@16(TableId@1000 : Integer;FieldNo@1002 : Integer;CueValue@1001 : Decimal) : Text;
    VAR
      CueSetup@1003 : Codeunit 9701;
    BEGIN
      EXIT(CueSetup.GetCustomizedCueStyle(TableId,FieldNo,CueValue));
    END;

    PROCEDURE SetGlobalLanguage@5();
    BEGIN
      LanguageManagement.SetGlobalLanguage;
    END;

    PROCEDURE ValidateApplicationlLanguage@1102601001(LanguageID@1037 : Integer);
    BEGIN
      LanguageManagement.ValidateApplicationLanguage(LanguageID);
    END;

    PROCEDURE LookupApplicationlLanguage@1102601005(VAR LanguageID@1040 : Integer);
    BEGIN
      LanguageManagement.LookupApplicationLanguage(LanguageID);
    END;

    PROCEDURE NASHandler@99(NASID@1000 : Text[260]);
    BEGIN
      NASManagement.NASHandler(NASID);
    END;

    PROCEDURE GetDatabaseTableTriggerSetup@25(TableId@1000 : Integer;VAR OnDatabaseInsert@1001 : Boolean;VAR OnDatabaseModify@1002 : Boolean;VAR OnDatabaseDelete@1003 : Boolean;VAR OnDatabaseRename@1004 : Boolean);
    VAR
      IntegrationManagement@1005 : Codeunit 5150;
      ChangeLogMgt@1006 : Codeunit 423;
    BEGIN
      ChangeLogMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);

      IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    END;

    PROCEDURE OnDatabaseInsert@26(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogInsertion(RecRef);

      IntegrationManagement.OnDatabaseInsert(RecRef);
    END;

    PROCEDURE OnDatabaseModify@27(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogModification(RecRef);

      IntegrationManagement.OnDatabaseModify(RecRef);
    END;

    PROCEDURE OnDatabaseDelete@28(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogDeletion(RecRef);

      IntegrationManagement.OnDatabaseDelete(RecRef);
    END;

    PROCEDURE OnDatabaseRename@29(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    VAR
      IntegrationManagement@1002 : Codeunit 5150;
      ChangeLogMgt@1003 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogRename(RecRef,xRecRef);

      IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    END;

    PROCEDURE OnDebuggerBreak@55(ErrorMessage@1000 : Text);
    BEGIN
      DebuggerManagement.ProcessDebuggerBreak(ErrorMessage);
    END;

    PROCEDURE LaunchDebugger@60();
    BEGIN
      PAGE.RUN(PAGE::"Session List");
    END;

    PROCEDURE CustomizeChart@70(VAR TempChart@1000 : TEMPORARY Record 2000000078) : Boolean;
    VAR
      GenericChartMgt@1001 : Codeunit 9180;
    BEGIN
      EXIT(GenericChartMgt.ChartCustomization(TempChart));
    END;

    PROCEDURE HasCustomLayout@76(ObjectType@1004 : 'Report,Page';ObjectID@1000 : Integer) : Integer;
    VAR
      ReportLayoutSelection@1003 : Record 9651;
    BEGIN
      // Return value:
      // 0: No custom layout
      // 1: RDLC layout
      // 2: Word layout
      IF ObjectType <> ObjectType::Report THEN
        ERROR(NotSupportedErr);

      EXIT(ReportLayoutSelection.HasCustomLayout(ObjectID));
    END;

    PROCEDURE MergeDocument@77(ObjectType@1006 : 'Report,Page';ObjectID@1000 : Integer;ReportAction@1001 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print';XmlData@1002 : InStream;FileName@1003 : Text);
    VAR
      DocumentReportMgt@1004 : Codeunit 9651;
    BEGIN
      IF ObjectType <> ObjectType::Report THEN
        ERROR(NotSupportedErr);

      DocumentReportMgt.MergeWordLayout(ObjectID,ReportAction,XmlData,FileName);
    END;

    PROCEDURE ReportGetCustomRdlc@78(ReportId@1000 : Integer) : Text;
    VAR
      CustomReportLayout@1002 : Record 9650;
    BEGIN
      EXIT(CustomReportLayout.GetCustomRdlc(ReportId));
    END;

    PROCEDURE ReportScheduler@79(ReportId@1000 : Integer;RequestPageXml@1001 : Text) : Boolean;
    VAR
      ScheduleAReport@1002 : Page 682;
    BEGIN
      EXIT(ScheduleAReport.ScheduleAReport(ReportId,RequestPageXml));
    END;

    LOCAL PROCEDURE "-- JLX"@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE FctYoozImportFile@1000000000();
    VAR
      lrec_YoozParameters@1000000004 : Record 50013;
      lrec_NameValueBuffer@1000000003 : Record 823;
      lrec_FileYooz@1000000005 : Record 50015;
      lrec_FileYooz2@1000000006 : Record 50015;
      FileMgt@1000000002 : Codeunit 419;
      ImportXmlFile@1000000001 : File;
      XmlINStream@1000000000 : InStream;
      FileName@1000000007 : Text[250];
      i@1000000008 : Integer;
    BEGIN
      IF NOT lrec_YoozParameters.GET THEN
       EXIT;
      IF NOT FileMgt.ServerDirectoryExists(lrec_YoozParameters."Yooz Import Path") THEN
       EXIT;
      IF NOT FileMgt.ServerDirectoryExists(lrec_YoozParameters."Yooz Imported File Path") THEN
       EXIT;

      // V‚rification des fichiers import‚s par le NAS et … d‚placer
      lrec_FileYooz.RESET;
      lrec_FileYooz.SETCURRENTKEY("Yooz Import","Yooz Import Date");
      lrec_FileYooz.SETRANGE("Yooz Import",FALSE);
      lrec_FileYooz.SETFILTER("Yooz Import Date",'<>%1',0D);
      IF lrec_FileYooz.FINDFIRST THEN
       REPEAT
        FOR i := STRLEN(lrec_FileYooz."File Name" + lrec_FileYooz."File Name 2") DOWNTO 1 DO
         IF COPYSTR(lrec_FileYooz."File Name" + lrec_FileYooz."File Name 2",i,1) = '\' THEN BEGIN
          FileName := COPYSTR(lrec_FileYooz."File Name" + lrec_FileYooz."File Name 2",i + 1);
          i := 1;
         END;

        IF FileMgt.ClientFileExists(lrec_FileYooz."File Name" + lrec_FileYooz."File Name 2") THEN
         FileMgt.MoveFile(lrec_FileYooz."File Name" + lrec_FileYooz."File Name 2",lrec_YoozParameters."Yooz Imported File Path" + '\' + FileName);

        IF lrec_FileYooz2.GET(lrec_FileYooz."Entry No.") THEN BEGIN
         lrec_FileYooz2."Yooz Import" := TRUE;
         lrec_FileYooz2.MODIFY;
        END;
       UNTIL lrec_FileYooz.NEXT = 0;

      FileMgt.GetClientDirectoryFilesList(lrec_NameValueBuffer,lrec_YoozParameters."Yooz Import Path");
      IF lrec_NameValueBuffer.FINDFIRST THEN
       REPEAT
        IF lrec_NameValueBuffer.Name <> '' THEN
          IF ImportXmlFile.OPEN(lrec_NameValueBuffer.Name) THEN BEGIN
            lrec_FileYooz.RESET;
            lrec_FileYooz.SETCURRENTKEY("File Name","Yooz Import");
            lrec_FileYooz.SETRANGE("File Name",COPYSTR(lrec_NameValueBuffer.Name,1,250));
            lrec_FileYooz.SETRANGE("Yooz Import",FALSE);
            IF lrec_FileYooz.ISEMPTY THEN BEGIN
              lrec_FileYooz.RESET;
              lrec_FileYooz.INIT;
              IF lrec_FileYooz2.FINDLAST THEN
               lrec_FileYooz."Entry No." := lrec_FileYooz2."Entry No." + 1
              ELSE
               lrec_FileYooz."Entry No." := 1;
              lrec_FileYooz."File Name" := COPYSTR(lrec_NameValueBuffer.Name,1,250);
              lrec_FileYooz."File Name 2" := COPYSTR(lrec_NameValueBuffer.Name,251);
              lrec_FileYooz."Created Date" := TODAY;
              lrec_FileYooz.INSERT;
            END;
          END;
      UNTIL lrec_NameValueBuffer.NEXT = 0;
    END;

    BEGIN
    {
      //JX-YOOZ2-PBE
      //Ajout fonction permettant de v‚rifier si des fichiers yooz sont … importer
    }
    END.
  }
}

